package main

import (
	"database/sql"
	"fmt"
	"log"
	"os"
	"strconv"
	"strings"
	"time"
	"unicode/utf8"

	tg "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	_ "github.com/mattn/go-sqlite3"
	"golang.org/x/exp/rand"
)

func main() {
	log.Println("–ó–∞–ø—É—Å–∫")

	// –ü–æ–¥–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞
	bot, err := tg.NewBotAPI(os.Getenv("TELEGRAM_BOT_TOKEN"))
	if err != nil {
		log.Fatal(err)
	}

	// –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–æ–∫–µ–Ω "TELEGRAM_BOT_TOKEN" | –∑–∞–ø–∞—Å–Ω–æ–π "TELEGRAM_TOKEN_BOT"

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
	initDatabase()
	db, err := sql.Open("sqlite3", "secretsanta.db")
	if err != nil {
		log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ë–î –≤ main", err)
		fmt.Println("–ø—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–∫—Ä–æ–µ—Ç—Å—è —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥")
		time.Sleep(30 * time.Second)
		db.Close()
		return
	}
	defer db.Close()
	fmt.Println("---–ë–î –ø–æ–¥–Ω—è–ª–∞—Å—å")

	time.Sleep(2 * time.Second)

	groups[0] = &Group{Name: "¬´¬ª"}
	var offset int

	// –¶–∏–∫–ª —Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏
	log.Println("–†–∞–±–æ—Ç–∞—é...")
	for {
		// –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
		updates, err := bot.GetUpdates(tg.UpdateConfig{Offset: offset + 1, Limit: 100, Timeout: 30})
		if err != nil {
			fmt.Println("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:", err)
			time.Sleep(10 * time.Second)
			return
		}

		for _, update := range updates {
			if update.Message != nil {
				if update.Message.Chat.IsGroup() || update.Message.Chat.IsSuperGroup() {
					fmt.Println("GROUP CHAT OR SUPERCHAT MESSAGE DETECTED")
				}
				fmt.Println("---------------")
				handleMessage(bot, update.Message, db)
				log.Println("---------------")
				offset = update.UpdateID
				continue
			}

			if update.CallbackQuery != nil {
				fmt.Println("---------------")
				handleButtons(bot, update, db)
				log.Println("---------------")
				offset = update.UpdateID
				continue
			}

			if update.MyChatMember != nil {
				oldStatus := update.MyChatMember.OldChatMember.Status
				newStatus := update.MyChatMember.NewChatMember.Status
				name := update.MyChatMember.From.UserName + update.MyChatMember.From.FirstName + update.MyChatMember.From.LastName
				chat := update.MyChatMember.Chat.ID
				fmt.Println("---------------")
				fmt.Printf("–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –∏–∑–º–µ–Ω–∏–ª—Å—è:\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: %s\n–ß–∞—Ç: %d\n–°—Ç–∞—Ä—ã–π —Å—Ç–∞—Ç—É—Å: %s\n–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: %s\n", name, chat, oldStatus, newStatus)
				log.Println("---------------")
				offset = update.UpdateID
				continue
			}

			// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
			if update.EditedMessage != nil {
				fmt.Println("---------------")
				fmt.Println("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ: EditedMessage")
				log.Println("---------------")
				offset = update.UpdateID
				continue
			}

			if update.ChannelPost != nil {
				fmt.Println("---------------")
				fmt.Println("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ChannelPost")
				log.Println("---------------")
				offset = update.UpdateID
				continue
			}

			if update.EditedChannelPost != nil {
				fmt.Println("---------------")
				fmt.Println("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ: EditedChannelPost")
				log.Println("---------------")
				offset = update.UpdateID
				continue
			}

			if update.InlineQuery != nil {
				fmt.Println("---------------")
				fmt.Println("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ: InlineQuery")
				log.Println("---------------")
				offset = update.UpdateID
				continue
			}

			if update.ChosenInlineResult != nil {
				fmt.Println("---------------")
				fmt.Println("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ChosenInlineResult")
				log.Println("---------------")
				offset = update.UpdateID
				continue
			}

			if update.ShippingQuery != nil {
				fmt.Println("---------------")
				fmt.Println("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ShippingQuery")
				log.Println("---------------")
				offset = update.UpdateID
				continue
			}

			if update.PreCheckoutQuery != nil {
				fmt.Println("---------------")
				fmt.Println("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ: PreCheckoutQuery")
				log.Println("---------------")
				offset = update.UpdateID
				continue
			}

			if update.Poll != nil {
				fmt.Println("---------------")
				fmt.Println("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ: Poll")
				log.Println("---------------")
				offset = update.UpdateID
				continue
			}

			if update.PollAnswer != nil {
				fmt.Println("---------------")
				fmt.Println("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ: PollAnswer")
				log.Println("---------------")
				offset = update.UpdateID
				continue
			}

			fmt.Println("---------------")
			fmt.Println("–ù–µ–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:")
			fmt.Printf("UpdateID: %d\nMessage: %+v\nEditedMessage: %+v\nChannelPost: %+v\nEditedChannelPost: %+v\nInlineQuery: %+v\nChosenInlineResult: %+v\nCallbackQuery: %+v\nShippingQuery: %+v\nPreCheckoutQuery: %+v\nPoll: %+v\nPollAnswer: %+v\nMyChatMember: %+v\nChatMember: %+v\nChatJoinRequest: %+v\n", update.UpdateID, update.Message, update.EditedMessage, update.ChannelPost, update.EditedChannelPost, update.InlineQuery, update.ChosenInlineResult, update.CallbackQuery, update.ShippingQuery, update.PreCheckoutQuery, update.Poll, update.PollAnswer, update.MyChatMember, update.ChatMember, update.ChatJoinRequest)
			log.Println("---------------")
			offset = update.UpdateID
		}
	}
}

func handleMessage(bot *tg.BotAPI, message *tg.Message, db *sql.DB) {
	time.Sleep(50 * time.Millisecond)
	defer func() { // –≥–∞—Ä–∞–Ω—Ç–∏—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
		if r := recover(); r != nil {
			fmt.Println("–ü–∞–Ω–∏–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑ handleMessage:", r)
		}
	}()

	// –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
	userID := message.From.ID
	var tgname string = message.From.UserName + message.From.FirstName + message.From.LastName
	if _, ok := members[userID]; !ok {
		members[userID] = &Member{ID: userID}
		fmt.Println("–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
		_, err := db.Exec("INSERT INTO users (id, tgname, link, ward) VALUES (?, ?, ?, ?)", userID, tgname, "", "")
		if err != nil {
			fmt.Println("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —é–∑–µ—Ä–∞ –≤ –ë–î –≤ handlemessage. User:", userID, err)
		}
	}
	m := members[userID]
	var grp *Group = groups[0]
	if m.Group != 0 {
		if _, g := groups[m.Group]; g {
			grp = groups[m.Group]
		}
	} else if m.tempGroup != 0 {
		if _, g := groups[m.tempGroup]; g {
			grp = groups[m.tempGroup]
		}
	}
	state := m.Status
	var danet string
	var leaderstvo string
	if !grp.DrawTime.IsZero() {
		danet = "–î–ê"
	} else {
		danet = "–ù–ï–¢"
	}
	if grp.leaderID == userID {
		leaderstvo = "–î–ê"
	} else {
		leaderstvo = "–ù–ï–¢"
	}

	//–ª–æ–≥
	fmt.Printf("ID: %d; tgname: %s; –õ–∏–¥–µ—Ä: %s; –ì—Ä—É–ø–ø–∞: %s; ‚Ññ –ì—Ä—É–ø–ø—ã: %d; –ß–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç—å: %d; –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ: %s; tmpgrp: %d; –ò–º—è: %s; tmpname: %s; len(link): %d; ChangeLink: %d; len(Ward): %d; WardID: %d; DrawID: %d; Status: %s;\n\n –°–æ–æ–±—â–µ–Ω–∏–µ: %s;\n\n", m.ID, tgname, leaderstvo, grp.Name, grp.ID, len(grp.Members), danet, m.tempGroup, m.Name, m.tempName, utf8.RuneCountInString(m.Link), m.ChangeLink, utf8.RuneCountInString(m.Ward), m.WardID, m.DrawID, m.Status, message.Text)

	// –æ–±—Ä–∞–±–æ–∫—Ç–∞ "—Ä–µ–ø–ª–∞–π" –∫–Ω–æ–ø–æ–∫
	if message.Text == "–°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É" {
		create_Group(bot, userID)
		return
	} else if message.Text == "–ö–∞–±–∏–Ω–µ—Ç –°–∞–Ω—Ç—ãüéÖ" {
		openProfile(bot, userID)
		return
	} else if message.Text == "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–æ–π‚öôÔ∏è" {
		groupManagement(bot, userID)
		return
	} else if message.Text == "–°–ø—Ä–∞–≤–∫–∞‚ÑπÔ∏è" {
		info(bot, userID)
		return
	}

	// –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ä—Ç–∞
	if message.IsCommand() {
		switch message.Command() {
		case "start":
			if strings.Contains(message.Text, "/start ") {
				groupID, err := strconv.ParseInt(strings.TrimPrefix(message.Text, "/start "), 10, 64)
				if err != nil {
					bot.Send(tg.NewMessage(userID, "–ß—Ç–æ-—Ç–æ —Å —Å—Å—ã–ª–∫–æ–π –Ω–µ —Ç–∞–∫. –ü–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—å –µ—ë –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –¥—Ä—É–≥—É—é."))
					fmt.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ groupID –∏–∑ —Å—Ç—Ä–æ–∫–∏ –≤ int –≤ –±–ª–æ–∫–µ case: start", err)
					return
				}
				join_Member(bot, groupID, userID)
				return
			}
			start_Command(bot, userID)
			return
		case "update":
			stringline := `
			üéâ –ü—Ä–∏–≤–µ—Ç, –¥–æ—Ä–æ–≥–∏–µ –ª—é–±–∏—Ç–µ–ª–∏ —Ç–∞–π–Ω –∏ –ø–æ–¥–∞—Ä–∫–æ–≤! üéÖ

			–Ø —Ä–∞–¥ —Å–æ–æ–±—â–∏—Ç—å –í–∞–º –æ –Ω–æ–≤–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏, –∫–æ—Ç–æ—Ä–æ–µ —Å–¥–µ–ª–∞–µ—Ç –í–∞—à—É –∏–≥—Ä—É –µ—â–µ –±–æ–ª–µ–µ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–π –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–π! üöÄ

			‚ú® –ß—Ç–æ –Ω–æ–≤–æ–≥–æ?

			<b>–£–ª—É—á—à–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å:</b> —Ç–µ–ø–µ—Ä—å –æ–±—â–∞—Ç—å—Å—è —Å –±–æ—Ç–æ–º —Å—Ç–∞–ª–æ –µ—â–µ –ø—Ä–æ—â–µ –∏ —É–¥–æ–±–Ω–µ–µ!
			 -–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –∑–∞–º–µ–Ω—ë–Ω –Ω–∞ –ö–∞–±–∏–Ω–µ—Ç —Å–∞–Ω—Ç—ã.
			 -–î–ª—è –ª–∏–¥–µ—Ä–æ–≤ –≥—Ä—É–ø–ø—ã —Ç–µ–ø–µ—Ä—å –æ—Ç–¥–µ–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–æ–π.
			 -–ü–µ—Ä–µ—Ä–∞–±–æ—Ç–∞–Ω—ã –∫–Ω–æ–ø–∫–∏.
			 -–¢–µ–∫—Å—Ç –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å—Ç–∞–ª –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—ã–º.

			<b>–ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>
			 -–¢–µ–ø–µ—Ä—å –ø–æ—Å–ª–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–æ–∂–Ω–æ –ø–æ–º–µ–Ω—è—Ç—å —Å–≤–æ–µ –∂–µ–ª–∞–Ω–∏–µ –¥–æ –¥–≤—É—Ö —Ä–∞–∑. –ê –¢–∞–π–Ω—ã–π –°–∞–Ω—Ç–∞ –ø–æ–¥–æ–ø–µ—á–Ω–æ–≥–æ –ø–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –∂–µ–ª–∞–Ω–∏–∏.
			 -–°–º–æ—Ç—Ä–µ—Ç—å –∏ –∏–∑–º–µ–Ω—è—Ç—å —Å–≤–æ–µ –∂–µ–ª–∞–Ω–∏–µ –º–æ–∂–Ω–æ –ø–æ—Å–ª–µ –≤—ã—Ö–æ–¥–∞ –∏–∑ –≥—Ä—É–ø–ø—ã —Å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –∏ –ø–æ—Å–ª–µ –µ—ë —É–¥–∞–ª–µ–Ω–∏—è –ª–∏–¥–µ—Ä–æ–º.
			 -–í —á–∞—Ç –≥—Ä—É–ø–ø—ã —Ç–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ/—Å—Ç–∏–∫–µ—Ä—ã.
			 -–õ–∏–¥–µ—Ä –≥—Ä—É–ø–ø—ã —Ç–µ–ø–µ—Ä—å –≤—Å–µ–≥–¥–∞ —Å–æ—Å—Ç–æ–∏—Ç –≤ —Å–≤–æ–µ–π –≥—Ä—É–ø–ø–µ. (–†–∞–Ω—å—à–µ –º–æ–∂–Ω–æ –±—ã–ª–æ —Å–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É –∏ –Ω–µ —Å–æ—Å—Ç–æ—è—Ç—å –≤ –Ω–µ–π)

			<b>-–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–æ–∫:</b> —É—Å—Ç—Ä–∞–Ω–µ–Ω—ã –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–¥–æ—á–µ—Ç—ã, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –í–∞—à –æ–ø—ã—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø—Ä–∏—è—Ç–Ω—ã–º.

			-–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –Ω–∞—à–ª–∏ –º–µ–Ω—è! –ù–∞–¥–µ—é—Å—å, —á—Ç–æ —ç—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–Ω–µ—Å–µ—Ç –í–∞–º –µ—â–µ –±–æ–ª—å—à–µ —Ä–∞–¥–æ—Å—Ç–∏ –∏ –≤–µ—Å–µ–ª—å—è –≤ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏! üéÅ

			–° –Ω–∞—Å—Ç—É–ø–∞—é—â–∏–º!

			–ë–æ—Ç –°–µ–∫—Ä–µ—Ç–Ω—ã–π –°–∞–Ω—Ç–∞.
			
			P.S. –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –Ω–µ—Ä–µ—à–∞–µ–º–∞—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–±–ª–µ–º–∞, –ø–∏—à–∏ –Ω–∞ email: sataiiip210@gmail.com`
			msg := tg.NewMessage(userID, stringline)
			keyboard(bot, userID, msg)
			return
		default:
			bot.Send(tg.NewMessage(userID, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –†–µ–∫–æ–º–µ–Ω–¥—É—é –Ω–∞—á–∞—Ç—å —Å /start"))
			fmt.Println(userID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
			return
		}
	}

	// —Å—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∞
	if state == "createNameGroup" {
		if utf8.RuneCountInString(message.Text) < 61 && utf8.RuneCountInString(message.Text) > 1 {
			id := time.Now().UnixNano()
			groups[id] = &Group{ID: id, leaderID: userID, Name: message.Text}
			m.tempGroup = id
			m.Status = "createDscript"
			msg := tg.NewMessage(userID, "–í–≤–µ–¥–∏ –ø—Ä–∞–≤–∏–ª–∞ –≥—Ä—É–ø–ø—ã.\n\n–ó–¥–µ—Å—å –ø–∏—à—É—Ç <b>–±—é–¥–∂–µ—Çüíµ</b> –∏ –ø–æ –∂–µ–ª–∞–Ω–∏—é <b>–æ—Å–æ–±—ã–µ –ø—Ä–∞–≤–∏–ª–∞.</b>üìù –û—Å–æ–±—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –ø–æ–º–æ–≥–∞—é—Ç —Å–¥–µ–ª–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—É—é –∏ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—É—é –∞—Ç–º–æ—Å—Ñ–µ—Ä—É.üí° –ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –∏—Ö —É–∫–∞–∑–∞—Ç—å, –Ω–µ –∑–∞–±—É–¥—å —ç—Ç–æ –æ–±—Å—É–¥–∏—Ç—å —Å–æ –≤—Å–µ–º–∏. –ò –Ω–µ –≤–æ–ª–Ω—É–π—Å—è, –µ—Å–ª–∏ —Å–µ–π—á–∞—Å –Ω–∏—á–µ–≥–æ –≤ –≥–æ–ª–æ–≤—É –Ω–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç, –∏—Ö –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –Ω–∞–ø–∏—Å–∞—Ç—å –ø–æ—Ç–æ–º.\n\n–í—Ä–µ–º—è –∏ –º–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∏–≥—Ä—ã –Ω–µ —É–∫–∞–∑—ã–≤–∞–π, –¥–ª—è —ç—Ç–æ–≥–æ –±—É–¥–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥.\n\n–ü—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è –¥–æ 2500 —Å–∏–º–≤–æ–ª–æ–≤.")
			msg.ParseMode = "HTML"
			bot.Send(msg)
			fmt.Println("–í–≤–µ–¥–µ–Ω–æ –∏–º—è –≥—Ä—É–ø–ø—ã ->", message.Text)
		} else {
			bot.Send(tg.NewMessage(userID, "–ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –¥–æ–ª–∂–Ω–æ –∏–º–µ—Ç—å –æ—Ç 2 –¥–æ 60 —Å–∏–º–≤–æ–ª–æ–≤."))
			fmt.Println("–ü—Ä–µ–≤—ã—à–µ–Ω—ã –≥—Ä–∞–Ω–∏—Ü—ã –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã")
		}
		return
	} else if state == "createDscript" {
		if utf8.RuneCountInString(message.Text) < 2501 && utf8.RuneCountInString(message.Text) > 0 {
			groups[m.tempGroup].Description = message.Text
			m.Status = "createTimePlace"
			msg := tg.NewMessage(userID, "–£–∫–∞–∂–∏ <b>–≤—Ä–µ–º—è –∏ –º–µ—Å—Ç–æ</b>üìÜ, –≥–¥–µ –±—É–¥–µ—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç—å <b>–æ–±–º–µ–Ω</b> –ø–æ–¥–∞—Ä–∫–∞–º–∏. –ù–∞–ø—Ä–∏–º–µ—Ä:\n–í—Ä–µ–º—è: 25 –¥–µ–∫–∞–±—Ä—è, 18:00\n–ú–µ—Å—Ç–æ: –ö–∞—Ñ–µ ¬´–°–Ω–µ–∂–Ω–∞—è —Å–∫–∞–∑–∫–∞¬ª, —É–ª–∏—Ü–∞ –ó–∏–º–Ω—è—è, 10.\n\n–ü—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è –¥–æ 255 —Å–∏–º–≤–æ–ª–æ–≤.")
			msg.ParseMode = "HTML"
			bot.Send(msg)
			fmt.Println("–í–≤–µ–¥–µ–Ω—ã –ø—Ä–∞–≤–∏–ª–∞ –≥—Ä—É–ø–ø—ã")
		} else {
			bot.Send(tg.NewMessage(userID, "–ü—Ä–∞–≤–∏–ª–∞ –≥—Ä—É–ø–ø—ã –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å –¥–æ 2500 —Å–∏–º–≤–æ–ª–æ–≤."))
			fmt.Println("–ü—Ä–µ–≤—ã—à–µ–Ω—ã –≥—Ä–∞–Ω–∏—Ü—ã –≤–≤–æ–¥–∞ –ø—Ä–∞–≤–∏–ª –≥—Ä—É–ø–ø—ã")
		}
		return
	} else if state == "createTimePlace" {
		if utf8.RuneCountInString(message.Text) < 256 && utf8.RuneCountInString(message.Text) > 0 {
			groups[m.tempGroup].TimePlace = message.Text
			m.Status = "joinName"
			protoname := message.From
			UserNick := protoname.UserName
			UserName := ""
			if protoname.FirstName != "" && protoname.LastName != "" {
				UserName = protoname.FirstName + " " + protoname.LastName
			} else {
				UserName = protoname.FirstName + protoname.LastName
			}
			var rows [][]tg.InlineKeyboardButton
			buttons := []tg.InlineKeyboardButton{}
			if UserNick != "" {
				buttons = []tg.InlineKeyboardButton{
					tg.NewInlineKeyboardButtonData(UserNick, "joinNick"),
				}
			}
			rows = append(rows, buttons)
			if UserName != "" {
				buttons = []tg.InlineKeyboardButton{
					tg.NewInlineKeyboardButtonData(UserName, "joinName"),
				}
			}
			rows = append(rows, buttons)
			inlineKeyboard := tg.NewInlineKeyboardMarkup(rows...)
			msg := tg.NewMessage(userID, "–ì—Ä—É–ø–ø–∞ –≥–æ—Ç–æ–≤–∞! –û—Å—Ç–∞–ª–æ—Å—å –≤–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –æ —Å–µ–±–µ. <b>–ù–∞–±–µ—Ä–∏ —Å–≤–æ–µ –∏–º—è –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –ø–æ –∫–Ω–æ–ø–∫–µ.</b>\n\n–ñ–µ–ª–∞—Ç–µ–ª—å–Ω–æ, —á—Ç–æ–±—ã –∏–º—è –±—ã–ª–æ –ø–æ–Ω—è—Ç–Ω—ã–º –¥–ª—è –ª—é–±–æ–≥–æ –°–∞–Ω—Ç—ã!\n\n–ï—Å–ª–∏ –≤ –≥—Ä—É–ø–ø–µ –±—É–¥—É—Ç –ª—é–¥–∏ —Å —Ç–∞–∫–∏–º –∂–µ –∏–º–µ–Ω–µ–º, –¥–æ–±–∞–≤—å —Å–≤–æ—é —Ñ–∞–º–∏–ª–∏—é. –ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –Ω–∏–∫–Ω–µ–π–º, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –ª—É—á—à–µ —É–∫–∞–∂–∏ —Å–≤–æ—ë –Ω–∞—Å—Ç–æ—è—â–µ–µ –∏–º—è.")
			msg.ParseMode = "HTML"
			msg.ReplyMarkup = inlineKeyboard
			bot.Send(msg)
			fmt.Println("–í–≤–µ–¥–µ–Ω—ã –≤—Ä–µ–º—è –∏ –º–µ—Å—Ç–æ –æ–±–º–µ–Ω–∞ –ø–æ–¥–∞—Ä–∫–∞–º–∏")
		} else {
			bot.Send(tg.NewMessage(userID, "–í—Ä–µ–º—è –∏ –º–µ—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∏ –≥—Ä—É–ø–ø—ã –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å –¥–æ 255 —Å–∏–º–≤–æ–ª–æ–≤."))
			fmt.Println("–ü—Ä–µ–≤—ã—à–µ–Ω—ã –≥—Ä–∞–Ω–∏—Ü—ã –≤–≤–æ–¥–∞ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ –æ–±–º–µ–Ω–∞ –ø–æ–¥–∞—Ä–∫–∞–º–∏")
		}
		return
	} else if state == "joinName" {
		if utf8.RuneCountInString(message.Text) < 51 && utf8.RuneCountInString(message.Text) > 1 {
			m.tempName = message.Text
			m.Status = "joinLink"
			inlineButton := tg.NewInlineKeyboardButtonData("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "joinLink")
			inlineKeyboard := tg.NewInlineKeyboardMarkup(tg.NewInlineKeyboardRow(inlineButton))
			msg := tg.NewMessage(userID, "–ù–∞–ø–∏—à–∏ —Å–≤–æ–µ <b>–∂–µ–ª–∞–Ω–∏–µ</b>üéÖüå≤üéÅüß¶üß£üç∞.\n\n–Ø –ø–µ—Ä–µ–¥–∞–º –µ–≥–æ —Ç–≤–æ–µ–º—É –±—É–¥—É—â–µ–º—É –¢–∞–π–Ω–æ–º—É –°–∞–Ω—Ç–µ. –ú–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å —Å—Ä–∞–∑—É —Å—Å—ã–ª–∫—É –Ω–∞ —Å–≤–æ–µ –∂–µ–ª–∞–Ω–∏–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä, —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä –∏–∑ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞. –ò–ª–∏ —Å—Ä–∞–∑—É –Ω–∞ —Ü–µ–ª—ã–π –≤–∏—à–ª–∏—Å—Ç(—Å–ø–∏—Å–æ–∫ –∂–µ–ª–∞–Ω–∏–π).\n\n–ï—Å–ª–∏ –º–∏–ª–µ–µ —Å—é—Ä–ø—Ä–∏–∑, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å –ø—Ä–∏–≤–µ—Ç —Å–≤–æ–µ–º—É –±—É–¥—É—â–µ–º—É –¥–∞—Ä–∏—Ç–µ–ª—é –∏–ª–∏ –Ω–∞–∂–∞—Ç—å ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª")
			msg.ParseMode = "HTML"
			msg.ReplyMarkup = inlineKeyboard
			bot.Send(msg)
			fmt.Println("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª –∏–º—è ->", message.Text)
		} else {
			bot.Send(tg.NewMessage(userID, "–£–∫–∞–∂–∏ –∏–º—è –æ—Ç 2 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤."))
			fmt.Println("–ü—Ä–µ–≤—ã—à–µ–Ω—ã –≥—Ä–∞–Ω–∏—Ü—ã –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
		}
		return
	} else if state == "joinLink" {
		if utf8.RuneCountInString(message.Text) < 10001 && utf8.RuneCountInString(message.Text) > 0 {
			_, ok := groups[m.tempGroup]
			if ok {
				if !groups[m.tempGroup].DrawTime.IsZero() {
					ok = false
				}
			}
			if ok {
				m.Link = message.Text
				m.Name = m.tempName
				m.tempName = ""
				m.Group = m.tempGroup
				m.tempGroup = 0
				m.Status = "quo"
				m.ChangeLink = 2
				m.DrawID = 0
				m.WardID = 0
				m.Ward = ""
				grp.Members = append(grp.Members, userID)
				if grp.leaderID == userID { // –µ—Å–ª–∏ —Å–æ–∑–¥–∞–≤–∞–ª –≥—Ä—É–ø–ø—É –ª–∏–¥–µ—Ä
					msg := tg.NewMessage(userID, "–û—Ç–ª–∏—á–Ω–æ, –≤—Å—ë –≥–æ—Ç–æ–≤–æ –∫ –≤–µ—Å–µ–ª—å—é!üéâ\n\n–†–∞–∑–æ—à–ª–∏ —ç—Ç–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —Å–≤–æ–∏–º –¥—Ä—É–∑—å—è–º, –¥–æ–∂–¥–∏—Å—å –∫–æ–≥–¥–∞ –≤—Å–µ –±—É–¥—É—Ç –≤ —Å–±–æ—Ä–µ‚úÖ –∏ –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ!\n\n–í ¬´–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–æ–π¬ª –º–æ–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ.\n–í ¬´–ö–∞–±–∏–Ω–µ—Ç–µ –°–∞–Ω—Ç—ã¬ª –º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å –∏–º—è –∏ –∂–µ–ª–∞–Ω–∏–µ.")
					keyboard(bot, userID, msg)
					bot.Send(tg.NewMessage(userID, fmt.Sprintf("–ì—Ä—É–ø–ø–∞ –¢–∞–π–Ω—ã—Ö –°–∞–Ω—Ç ¬´%s¬ª\nt.me/%s?start=%d", grp.Name, bot.Self.UserName, m.Group)))

					_, err := db.Exec("INSERT INTO groups (id, leaderid, leadertgname, group_name, description, timeplace, people, draw) VALUES (?, ?, ?, ?, ?, ?, ?, ?)", grp.ID, grp.leaderID, tgname, grp.Name, grp.Description, grp.TimePlace, 1, "NO")
					if err != nil {
						fmt.Println("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã –≤ –ë–î, joinLink –≤ handlemessage.", err)
					}

					_, err = db.Exec("UPDATE users SET leader = ?, grp = ?, grpname = ?, tmpgrp = ?, name = ?, link = ?, changelink = ?, ward = ?, wardid = ?, drawid = ? WHERE id = ?", "YES", grp.ID, grp.Name, m.tempGroup, m.Name, m.Link, m.ChangeLink, m.Ward, m.WardID, m.DrawID, m.ID)
					if err != nil {
						fmt.Println("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —é–∑–µ—Ä–∞-–ª–∏–¥–µ—Ä–∞ –≤ –ë–î, joinLink –≤ handlemessage.", err)
					}

					fmt.Println("–ì—Ä—É–ø–ø–∞ —Å–æ–∑–¥–∞–Ω–∞. –ñ–µ–ª–∞–Ω–∏–µ —É–∫–∞–∑–∞–ª")
					return
				}
				msg := tg.NewMessage(userID, "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n\n–¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ <b>–ö–∞–±–∏–Ω–µ—Ç—É –°–∞–Ω—Ç—ã</b>. –¢–∞–º —Ç—ã —Å–º–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –≥—Ä—É–ø–ø—ã, —Å–ø–∏—Å–æ–∫ –°–∞–Ω—Ç, –ø–æ–º–µ–Ω—è—Ç—å –∏–º—è –∏–ª–∏ –∂–µ–ª–∞–Ω–∏–µ! –¢–∞–∫ –∂–µ –¥–æ—Å—Ç—É–ø–µ–Ω <b>—á–∞—Ç</b>. –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–Ω–µ, –∞ –µ–≥–æ —É–≤–∏–¥—è—Ç –≤—Å–µ –≤ –≥—Ä—É–ø–ø–µ!\n\n–í–æ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–ø–ø–µ:")
				keyboard(bot, userID, msg)
				groupInfo(bot, userID)
				stringline := "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º <b>" + m.Name + "</b> –≤ ¬´" + grp.Name + "¬ª –∏ —Ä–∞–¥—É–µ–º—Å—è –∑–∞ –Ω–æ–≤–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ!"
				for _, id := range grp.Members {
					msg = tg.NewMessage(id, stringline)
					msg.ParseMode = "HTML"
					bot.Send(msg)
				}

				_, err := db.Exec("UPDATE users SET leader = ?, grp = ?, grpname = ?, tmpgrp = ?, name = ?, link = ?, changelink = ?, ward = ?, wardid = ?, drawid = ? WHERE id = ?", "NO", grp.ID, grp.Name, m.tempGroup, m.Name, m.Link, m.ChangeLink, m.Ward, m.WardID, m.DrawID, m.ID)
				if err != nil {
					fmt.Println("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —é–∑–µ—Ä–∞ –≤ –ë–î, joinLink –≤ handlemessage.", err)
				}
				_, err = db.Exec("UPDATE groups SET people = ?", len(grp.Members))
				if err != nil {
					fmt.Println("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è People –≤ joinlink handleMessage", err)
				}

				fmt.Println("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—à–µ–ª –≤ –≥—Ä—É–ø–ø—É, —É–∫–∞–∑–∞–≤ –∂–µ–ª–∞–Ω–∏–µ")
			} else {
				bot.Send(tg.NewMessage(userID, "–ì—Ä—É–ø–ø–∞, –∫—É–¥–∞ —à–ª–æ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ, –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–ª–∏ –∑–∞–∫—Ä—ã–ª–∞ —Å–≤–æ–∏ –¥–≤–µ—Ä–∏, –ø–æ–∫–∞ –∑–∞–ø–æ–ª–Ω—è–ª–∏—Å—å –¥–∞–Ω–Ω—ã–µ. –¢–µ–ø–µ—Ä—å –≤–æ–π—Ç–∏ –≤ –Ω–µ—ë –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.üò¢"))
				fmt.Println("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —É—Å–ø–µ–ª –∑–∞—Å–∫–æ—á–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É —Ç.–∫. –∏–ª–∏ –ø–æ–º–µ–Ω—è–ª–∞—Å—å —Å—Å—ã–ª–∫–∞ –∏–ª–∏ –≥—Ä—É–ø–ø–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ.")
				m.tempName = ""
				m.tempGroup = 0
				m.Status = ""
			}
		} else {
			bot.Send(tg.NewMessage(userID, "–ù–∞—Å—Ç–æ–ª—å–∫–æ –±–æ–ª—å—à–æ–µ –∂–µ–ª–∞–Ω–∏–µ —è –Ω–µ –º–æ–≥—É –ø—Ä–∏–Ω—è—Ç—å. –ù–µ –±–æ–ª–µ–µ 10000 —Å–∏–º–≤–æ–ª–æ–≤!"))
			fmt.Println("–ü—Ä–µ–≤—ã—à–µ–Ω—ã –≥—Ä–∞–Ω–∏—Ü—ã –≤–≤–æ–¥–∞ –∂–µ–ª–∞–Ω–∏—è")
		}
		return
	} else if strings.Contains(state, "ChangeInfo") {
		if state == "nameChangeInfo" {
			if utf8.RuneCountInString(message.Text) < 61 && utf8.RuneCountInString(message.Text) > 1 {
				if grp.Name == message.Text {
					bot.Send(tg.NewMessage(userID, "–ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –æ—Å—Ç–∞–ª–æ—Å—å –ø—Ä–µ–∂–Ω–∏–º. –ó–∞–ø—É—Å—Ç–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–Ω–æ–≤–∞, –µ—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å –µ–≥–æ!üîÑ"))
					fmt.Println("–ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –Ω–µ –ø–æ–º–µ–Ω—è–ª–æ—Å—å.")
					return
				}
				for _, id := range grp.Members {
					stringline := "–ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –∏–∑–º–µ–Ω–µ–Ω–æ —Å <b>" + grp.Name + "</b> –Ω–∞ <b>" + message.Text + "</b>"
					msg := tg.NewMessage(id, stringline)
					msg.ParseMode = "HTML"
					bot.Send(msg)
				}
				fmt.Println("–ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã —Å", grp.Name, "–Ω–∞", message.Text)
				grp.Name = message.Text
				m.Status = "quo"
				_, err := db.Exec("UPDATE groups SET group_name = ? WHERE id = ?", grp.Name, grp.ID)
				if err != nil {
					fmt.Println("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–º–µ–Ω–∏ –≥—Ä—É–ø–ø—ã –≤ changeinfo", err)
				}
			} else {
				bot.Send(tg.NewMessage(userID, "–ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –¥–æ–ª–∂–Ω–æ –∏–º–µ—Ç—å –æ—Ç 2 –¥–æ 60 —Å–∏–º–≤–æ–ª–æ–≤."))
				fmt.Println("–ü—Ä–µ–≤—ã—à–µ–Ω—ã –≥—Ä–∞–Ω–∏—Ü—ã –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏")
			}
			return
		} else if state == "rulesChangeInfo" {
			if utf8.RuneCountInString(message.Text) < 2501 && utf8.RuneCountInString(message.Text) > 0 {
				if grp.Description == message.Text {
					bot.Send(tg.NewMessage(userID, "–ü—Ä–∞–≤–∏–ª–∞ –≥—Ä—É–ø–ø—ã –æ—Å—Ç–∞–ª–∏—Å—å –ø—Ä–µ–∂–Ω–∏–º–∏. –ó–∞–ø—É—Å—Ç–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–Ω–æ–≤–∞, –µ—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å –∏—Ö!üîÑ"))
					fmt.Println("–ü—Ä–∞–≤–∏–ª–∞ –≥—Ä—É–ø–ø—ã –Ω–µ –ø–æ–º–µ–Ω—è–ª–∏—Å—å.")
					return
				}
				for _, id := range grp.Members {
					stringline := "–ü—Ä–∞–≤–∏–ª–∞ –≥—Ä—É–ø–ø—ã –∏–∑–º–µ–Ω–µ–Ω—ã. –¢–µ–ø–µ—Ä—å:\n<b>" + message.Text + "</b>"
					msg := tg.NewMessage(id, stringline)
					msg.ParseMode = "HTML"
					bot.Send(msg)
				}
				fmt.Println("–ò–∑–º–µ–Ω–µ–Ω—ã –ø—Ä–∞–≤–∏–ª–∞ –≥—Ä—É–ø–ø—ã")
				grp.Description = message.Text
				m.Status = "quo"
				_, err := db.Exec("UPDATE groups SET description = ? WHERE id = ?", grp.Description, grp.ID)
				if err != nil {
					fmt.Println("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª –≥—Ä—É–ø–ø—ã –≤ changeinfo", err)
				}
			} else {
				bot.Send(tg.NewMessage(userID, "–ü—Ä–∞–≤–∏–ª–∞ –≥—Ä—É–ø–ø—ã –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å –¥–æ 2500 —Å–∏–º–≤–æ–ª–æ–≤."))
				fmt.Println("–ü—Ä–µ–≤—ã—à–µ–Ω—ã –≥—Ä–∞–Ω–∏—Ü—ã –≤–≤–æ–¥–∞ –ø—Ä–∞–≤–∏–ª –≥—Ä—É–ø–ø—ã –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏")
			}
			return
		} else if state == "timeplaceChangeInfo" {
			if utf8.RuneCountInString(message.Text) < 256 && utf8.RuneCountInString(message.Text) > 0 {
				if grp.Description == message.Text {
					bot.Send(tg.NewMessage(userID, "–í—Ä–µ–º—è –∏ –º–µ—Å—Ç–æ –æ–±–º–µ–Ω–∞ –ø–æ–¥–∞—Ä–∫–∞–º–∏ –≥—Ä—É–ø–ø—ã –æ—Å—Ç–∞–ª–æ—Å—å –ø—Ä–µ–∂–Ω–∏–º–∏. –ó–∞–ø—É—Å—Ç–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–Ω–æ–≤–∞, –µ—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å –∏—Ö!üîÑ"))
					fmt.Println("–í—Ä–µ–º—è –∏ –º–µ—Å—Ç–æ –Ω–µ –ø–æ–º–µ–Ω—è–ª–∏—Å—å.")
					return
				}
				for _, id := range grp.Members {
					stringline := "–í—Ä–µ–º—è –∏ –º–µ—Å—Ç–æ –æ–±–º–µ–Ω–∞ –ø–æ–¥–∞—Ä–∫–∞–º–∏ –∏–∑–º–µ–Ω–µ–Ω—ã. –¢–µ–ø–µ—Ä—å:\n<b>" + message.Text + "</b>"
					msg := tg.NewMessage(id, stringline)
					msg.ParseMode = "HTML"
					bot.Send(msg)
				}
				fmt.Println("–ò–∑–º–µ–Ω–µ–Ω—ã –≤—Ä–µ–º—è –∏ –º–µ—Å—Ç–æ –æ–±–º–µ–Ω–∞ –ø–æ–¥–∞—Ä–∫–∞–º–∏")
				grp.TimePlace = message.Text
				m.Status = "quo"
				_, err := db.Exec("UPDATE groups SET timeplace = ? WHERE id = ?", grp.TimePlace, grp.ID)
				if err != nil {
					fmt.Println("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–π–º–ø–ª–µ–π—Å–∞ –≥—Ä—É–ø–ø—ã –≤ changeinfo", err)
				}
			} else {
				bot.Send(tg.NewMessage(userID, "–í—Ä–µ–º—è –∏ –º–µ—Å—Ç–æ –æ–±–º–µ–Ω–∞ –ø–æ–¥–∞—Ä–∫–∞–º–∏ –¥–æ–ª–∂–Ω–æ –∏–º–µ—Ç—å –¥–æ 255 —Å–∏–º–≤–æ–ª–æ–≤."))
				fmt.Println("–ü—Ä–µ–≤—ã—à–µ–Ω—ã –≥—Ä–∞–Ω–∏—Ü—ã –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ —Ç–∞–π–º–ø–ª–µ–π—Å–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏")
			}
			return
		}
	} else if state == "ChangeName" {
		if utf8.RuneCountInString(message.Text) < 51 && utf8.RuneCountInString(message.Text) > 1 {
			if m.Name == message.Text {
				bot.Send(tg.NewMessage(userID, "–ò–º—è –æ—Å—Ç–∞–ª–æ—Å—å –ø—Ä–µ–∂–Ω–∏–º. –ó–∞–ø—É—Å—Ç–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–Ω–æ–≤–∞, –µ—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å –µ–≥–æ!üîÑ"))
				m.Status = "quo"
				return
			}
			stringline := "–°–∞–Ω—Ç–∞ <b>" + m.Name + "</b> —Å–º–µ–Ω–∏–ª —Å–≤–æ—è –∏–º—è –Ω–∞ <b>" + message.Text + "</b>"
			for _, id := range grp.Members {
				msg := tg.NewMessage(id, stringline)
				msg.ParseMode = "HTML"
				bot.Send(msg)
			}
			m.Name = message.Text
			m.Status = "quo"
			_, err := db.Exec("UPDATE users SET name = ? WHERE id = ?", m.Name, userID)
			if err != nil {
				fmt.Println("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–º–µ–Ω–∏ —é–∑–µ—Ä–∞ –≤ changename", err)
			}
		} else {
			bot.Send(tg.NewMessage(userID, "–£–∫–∞–∂–∏ –∏–º—è –æ—Ç 2 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤."))
			fmt.Println("–ü—Ä–µ–≤—ã—à–µ–Ω—ã –≥—Ä–∞–Ω–∏—Ü—ã –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ ChangeName")
		}
		return
	} else if state == "ShowLink" {
		if utf8.RuneCountInString(message.Text) < 10001 && utf8.RuneCountInString(message.Text) > 0 {
			if m.DrawID != 0 && m.Link == message.Text { // —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±—ã–ª–æ. –∂–µ–ª–∞–Ω–∏–µ –Ω–µ –ø–æ–º–µ–Ω—è–ª–æ—Å—å
				m.Status = "quo"
				bot.Send(tg.NewMessage(userID, "–ñ–µ–ª–∞–Ω–∏–µ –æ—Å—Ç–∞–ª–æ—Å—å –ø—Ä–µ–∂–Ω–∏–º. –î–æ—Å—Ç—É–ø–Ω–∞—è –∑–∞–º–µ–Ω–∞ –Ω–µ —Å–≥–æ—Ä–∞–µ—Ç.üåü"))
				fmt.Println("–ó–∞–º–µ–Ω–∏–ª –∂–µ–ª–∞–Ω–∏–µ, –Ω–æ –æ–Ω–æ —Ç–∞–∫–∏–º –∏ –±—ã–ª–æ. –ü–æ–ø—ã—Ç–∫—É –Ω–µ —Å–∂–∏–≥–∞–µ–º.")
			} else if m.DrawID != 0 { // —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±—ã–ª–æ. –∂–µ–ª–∞–Ω–∏–µ –ø–æ–º–µ–Ω—è–ª–æ—Å—å
				m.Status = "quo"
				m.ChangeLink--
				m.Link = message.Text
				stringline := "–¢–≤–æ–π –ü–æ–¥–æ–ø–µ—á–Ω—ã–π <b>" + m.Name + "</b> –ø–æ–º–µ–Ω—è–ª —Å–≤–æ–µ –∂–µ–ª–∞–Ω–∏–µ! –¢–µ–ø–µ—Ä—å –æ–Ω —Ö–æ—á–µ—Ç:\n\nüéÑ-üéÅ-üéá-üéâ-üéÖ-üéÑ-‚ùÑÔ∏è-üéÖ-üéÜ-‚õÑ-üå®Ô∏è-ü¶å\n\n<b>" + m.Link + "</b>\n\nüéÑ-üéÅ-üéá-üéâ-üéÖ-üéÑ-‚ùÑÔ∏è-üéÖ-üéÜ-‚õÑ-üå®Ô∏è-ü¶å"
				msg := tg.NewMessage(m.DrawID, stringline)
				msg.ParseMode = "HTML"
				bot.Send(msg)
				members[m.DrawID].Ward = message.Text
				bot.Send(tg.NewMessage(userID, "–Ø —Å–æ—Ö—Ä–∞–Ω–∏–ª –Ω–æ–≤–æ–µ –∂–µ–ª–∞–Ω–∏–µ!‚ú® –¢–≤–æ–µ–º—É –¢–∞–π–Ω–æ–º—É –°–∞–Ω—Ç–µ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ."))
				fmt.Println("–í–≤—ë–ª –∂–µ–ª–∞–Ω–∏–µ. –ü–æ–ø—ã—Ç–∫–∏ —É–º–µ–Ω—å—à–∏–ª–∏—Å—å. –ò—Ö –æ—Å—Ç–∞–ª–æ—Å—å:", m.ChangeLink)
				_, err := db.Exec("UPDATE users SET link = ?, changelink = ? WHERE id = ?", m.Link, m.ChangeLink, userID)
				if err != nil {
					fmt.Println("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∂–µ–ª–∞–Ω–∏—è —é–∑–µ—Ä–∞ –≤ showlink(!IsZero)", err)
				}
				_, err = db.Exec("UPDATE users SET ward = ? WHERE id = ?", m.Link, m.DrawID)
				if err != nil {
					fmt.Println("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∂–µ–ª–∞–Ω–∏—è —É –¥—Ä–æ—É–≤–µ—Ä–∞ –≤ showlink(!IsZero)", err)
				}
			} else if m.Link == message.Text { // —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–µ –±—ã–ª–æ. –∂–µ–ª–∞–Ω–∏–µ –Ω–µ –ø–æ–º–µ–Ω—è–ª–æ—Å—å
				m.Status = "quo"
				bot.Send(tg.NewMessage(userID, "–ñ–µ–ª–∞–Ω–∏–µ –æ—Å—Ç–∞–ª–æ—Å—å –ø—Ä–µ–∂–Ω–∏–º.üåü"))
				fmt.Println("–ó–∞–º–µ–Ω–∏–ª –∂–µ–ª–∞–Ω–∏–µ, –Ω–æ –æ–Ω–æ —Ç–∞–∫–∏–º –∏ –±—ã–ª–æ.")
			} else { // —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–µ –±—ã–ª–æ. –∂–µ–ª–∞–Ω–∏–µ –ø–æ–º–µ–Ω—è–ª–æ—Å—å
				m.Status = "quo"
				m.Link = message.Text
				bot.Send(tg.NewMessage(userID, "–Ø —Å–æ—Ö—Ä–∞–Ω–∏–ª –Ω–æ–≤–æ–µ –∂–µ–ª–∞–Ω–∏–µ!‚ú®"))
				fmt.Println("–í–≤—ë–ª –Ω–æ–≤–æ–µ –∂–µ–ª–∞–Ω–∏–µ.")
				_, err := db.Exec("UPDATE users SET link = ? WHERE id = ?", m.Link, userID)
				if err != nil {
					fmt.Println("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∂–µ–ª–∞–Ω–∏—è —é–∑–µ—Ä–∞ –≤ showlink(else)", err)
				}
			}
		} else {
			bot.Send(tg.NewMessage(userID, "–ù–∞—Å—Ç–æ–ª—å–∫–æ –±–æ–ª—å—à–æ–µ –∂–µ–ª–∞–Ω–∏–µ —è –Ω–µ –º–æ–≥—É –ø—Ä–∏–Ω—è—Ç—å. –ù–µ –±–æ–ª–µ–µ 10000 —Å–∏–º–≤–æ–ª–æ–≤!"))
			fmt.Println("–ü—Ä–µ–≤—ã—à–µ–Ω—ã –≥—Ä–∞–Ω–∏—Ü—ã –≤–≤–æ–¥–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∂–µ–ª–∞–Ω–∏—è")
		}
		return
	}

	// –ß–∞—Ç
	if m.Group != 0 {
		// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∏–∫–µ—Ä–æ–≤
		if message.Sticker != nil {
			for _, memberID := range grp.Members {
				if memberID != userID {
					// –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å—Ç–∏–∫–µ—Ä–æ–º –∏ –ø–æ–¥–ø–∏—Å—å—é
					stickerMsg := tg.NewMessage(memberID, "<b>"+m.Name+"</b>:")
					stickerMsg.ParseMode = "HTML"
					bot.Send(stickerMsg)

					// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∞–º —Å—Ç–∏–∫–µ—Ä
					sticker := tg.NewSticker(memberID, tg.FileID(message.Sticker.FileID))
					bot.Send(sticker)
				}
			}
			msg := tg.NewMessage(userID, "–°—Ç–∏–∫–µ—Ä —É—à–µ–ª –≤ —á–∞—Ç –≥—Ä—É–ø–ø—ã‚úÖ")
			keyboard(bot, userID, msg)
			fmt.Println("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å—Ç–∏–∫–µ—Ä –≤ —á–∞—Ç")
			return
		}

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ
		if message.Photo != nil || message.Video != nil {
			caption := message.Caption
			if utf8.RuneCountInString(caption) < 361 {
				for _, memberID := range grp.Members {
					if memberID != userID {
						// –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
						if message.Photo != nil {
							photoMsg := tg.NewPhoto(memberID, tg.FileID(message.Photo[0].FileID))
							photoMsg.Caption = "<b>" + m.Name + "</b>:\n" + caption
							photoMsg.ParseMode = "HTML"
							bot.Send(photoMsg)
						}
						// –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
						if message.Video != nil {
							videoMsg := tg.NewVideo(memberID, tg.FileID(message.Video.FileID))
							videoMsg.Caption = "<b>" + m.Name + "</b>:\n" + caption
							videoMsg.ParseMode = "HTML"
							bot.Send(videoMsg)
						}
					}
				}
				bot.Send(tg.NewMessage(userID, "–°–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–¥–∏–∞ —É—à–ª–æ –≤ —á–∞—Ç –≥—Ä—É–ø–ø—ã‚úÖ"))
				fmt.Println("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–µ–¥–∏–∞ –≤ —á–∞—Ç")
			} else {
				bot.Send(tg.NewMessage(userID, "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –°–æ–æ–±—â–µ–Ω–∏–µ –∫ –º–µ–¥–∏–∞ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 360 —Å–∏–º–≤–æ–ª–æ–≤."))
				fmt.Println("–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π —Ç–µ–∫—Å—Ç –∫ –º–µ–¥–∏–∞ –¥–ª—è —á–∞—Ç–∞")
			}
			return
		}

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
		if utf8.RuneCountInString(message.Text) < 361 && utf8.RuneCountInString(message.Text) > 0 {
			stringline := "<b>" + m.Name + "</b>:\n" + message.Text
			for _, m := range grp.Members {
				if m != userID {
					msg := tg.NewMessage(m, stringline)
					msg.ParseMode = "HTML"
					bot.Send(msg)
				}
			}
			msg := tg.NewMessage(userID, "–°–æ–æ–±—â–µ–Ω–∏–µ —É—à–ª–æ –≤ —á–∞—Ç –≥—Ä—É–ø–ø—ã‚úÖ")
			keyboard(bot, userID, msg)
			fmt.Println("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç")
		} else {
			bot.Send(tg.NewMessage(userID, "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –†–∞–∑–º–µ—Ä –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 360 —Å–∏–º–≤–æ–ª–æ–≤."))
			fmt.Println("–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —á–∞—Ç–∞")
		}
		return
	}
	msg := tg.NewMessage(userID, "–Ø –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ç–∞–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ë—É–¥—å —Ç—ã –≤ –≥—Ä—É–ø–ø–µ, —Ç–æ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—à–ª–æ –±—ã –≤ –µ–µ —á–∞—Ç.")
	keyboard(bot, userID, msg)
	fmt.Println("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–µ–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
}

func handleButtons(bot *tg.BotAPI, update tg.Update, db *sql.DB) {
	time.Sleep(50 * time.Millisecond)
	defer func() { // –≥–∞—Ä–∞–Ω—Ç–∏—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
		if r := recover(); r != nil {
			fmt.Println("–ü–∞–Ω–∏–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑ handleButtons:", r)
		}
	}()

	// –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
	query := update.CallbackQuery
	userID := query.From.ID
	var tgname string = query.From.UserName + query.From.FirstName + query.From.LastName
	if _, ok := members[userID]; !ok {
		members[userID] = &Member{ID: userID}
		fmt.Println("–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
		_, err := db.Exec("INSERT INTO users (id, tgname, link, ward) VALUES (?, ?, ?, ?)", userID, tgname, "", "")
		if err != nil {
			fmt.Println("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —é–∑–µ—Ä–∞ –≤ –ë–î –≤ handleButtons. User:", userID, err)
		}
	}
	m := members[userID]
	var grp *Group = groups[0]
	if m.Group != 0 {
		if _, g := groups[m.Group]; g {
			grp = groups[m.Group]
		}
	} else if m.tempGroup != 0 {
		if _, g := groups[m.tempGroup]; g {
			grp = groups[m.tempGroup]
		}
	}
	var danet string
	var leaderstvo string
	if !grp.DrawTime.IsZero() {
		danet = "–î–ê"
	} else {
		danet = "–ù–ï–¢"
	}
	if grp.leaderID == userID {
		leaderstvo = "–î–ê"
	} else {
		leaderstvo = "–ù–ï–¢"
	}

	//–ª–æ–≥
	fmt.Printf("ID: %d; tgname: %s; –õ–∏–¥–µ—Ä: %s; –ì—Ä—É–ø–ø–∞: %s; ‚Ññ –ì—Ä—É–ø–ø—ã: %d; –ß–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç—å: %d; –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ: %s; tmpgrp: %d; –ò–º—è: %s; tmpname: %s; len(link): %d; ChangeLink: %d; len(Ward): %d; WardID: %d; DrawID: %d; Status: %s;\n\n –ö–Ω–æ–ø–∫–∞: %s;\n\n", m.ID, tgname, leaderstvo, grp.Name, grp.ID, len(grp.Members), danet, m.tempGroup, m.Name, m.tempName, utf8.RuneCountInString(m.Link), m.ChangeLink, utf8.RuneCountInString(m.Ward), m.WardID, m.DrawID, m.Status, query.Data)

	// –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
	if query.Data == "create_Group" {
		create_Group(bot, userID)
	} else if query.Data == "startJoin" {
		startJoin(bot, update, userID, m.tempGroup)
	} else if query.Data == "info" {
		info(bot, userID)
	} else if query.Data == "joinName" {
		if m.Group != 0 {
			bot.Send(tg.NewMessage(userID, "–û–π, —É —Ç–µ–±—è —É–∂–µ –≤—ã–±—Ä–∞–Ω–æ –∏–º—è! –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –µ–≥–æ –ø–æ–º–µ–Ω—è—Ç—å, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –ö–∞–±–∏–Ω–µ—Ç–æ–º –°–∞–Ω—Ç—ã."))
			fmt.Println("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –∏–º—è, –Ω–æ –æ–Ω —É–∂–µ –≤ –≥—Ä—É–ø–ø–µ")
			return
		} else if m.Status != "joinName" {
			bot.Send(tg.NewMessage(userID, "–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –í–æ–∑–º–æ–∂–Ω–æ –Ω—É–∂–µ–Ω –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –ø—Ä–æ—Ö–æ–¥ –ø–æ —Å—Å—ã–ª–∫–µ."))
			fmt.Println("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –∏–º—è, –Ω–æ —Å—Ç–∞—Ç—É—Å —É–∂–µ –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–π")
			return
		}

		// –µ—Å–ª–∏ –ø—Ä–æ–π–¥–µ–Ω—ã –ø—Ä–æ–≤–µ—Ä–∫–∏
		protoname := query.From
		UserName := ""
		if protoname.FirstName != "" && protoname.LastName != "" {
			UserName = protoname.FirstName + " " + protoname.LastName
		} else {
			UserName = protoname.FirstName + protoname.LastName
		}
		m.tempName = UserName
		m.Status = "joinLink" // –º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
		inlineButton := tg.NewInlineKeyboardButtonData("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "joinLink")
		inlineKeyboard := tg.NewInlineKeyboardMarkup(tg.NewInlineKeyboardRow(inlineButton))
		msg := tg.NewMessage(userID, "–ù–∞–ø–∏—à–∏ —Å–≤–æ–µ <b>–∂–µ–ª–∞–Ω–∏–µ</b>üéÖüå≤üéÅüß¶üß£üç∞.\n\n–Ø –ø–µ—Ä–µ–¥–∞–º –µ–≥–æ —Ç–≤–æ–µ–º—É –±—É–¥—É—â–µ–º—É –¢–∞–π–Ω–æ–º—É –°–∞–Ω—Ç–µ. –ú–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å —Å—Ä–∞–∑—É —Å—Å—ã–ª–∫—É –Ω–∞ —Å–≤–æ–µ –∂–µ–ª–∞–Ω–∏–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä, —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä –∏–∑ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞. –ò–ª–∏ —Å—Ä–∞–∑—É –Ω–∞ —Ü–µ–ª—ã–π –≤–∏—à–ª–∏—Å—Ç(—Å–ø–∏—Å–æ–∫ –∂–µ–ª–∞–Ω–∏–π).\n\n–ï—Å–ª–∏ –º–∏–ª–µ–µ —Å—é—Ä–ø—Ä–∏–∑, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å –ø—Ä–∏–≤–µ—Ç —Å–≤–æ–µ–º—É –±—É–¥—É—â–µ–º—É –¥–∞—Ä–∏—Ç–µ–ª—é –∏–ª–∏ –Ω–∞–∂–∞—Ç—å ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª")
		msg.ReplyMarkup = inlineKeyboard // —Å–±–∏–ª–¥–∏–ª–∏ –∫–Ω–æ–ø–∫—É —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –Ω–∞ —ç—Ç–∞–ø–µ –∑–∞–ø—Ä–æ—Å–∞ link
		msg.ParseMode = "HTML"
		bot.Send(msg)
		fmt.Println("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –∏–º—è ->", UserName)
	} else if query.Data == "joinNick" {
		if m.Group != 0 {
			bot.Send(tg.NewMessage(userID, "–û–π, —É —Ç–µ–±—è —É–∂–µ –≤—ã–±—Ä–∞–Ω–æ –∏–º—è! –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –µ–≥–æ –ø–æ–º–µ–Ω—è—Ç—å, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è ¬´–ö–∞–±–∏–Ω–µ—Ç–æ–º –°–∞–Ω—Ç—ã¬ª."))
			fmt.Println("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –Ω–∏–∫, –Ω–æ –æ–Ω —É–∂–µ –≤ –≥—Ä—É–ø–ø–µ")
			return
		} else if m.Status != "joinName" {
			bot.Send(tg.NewMessage(userID, "–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –í–æ–∑–º–æ–∂–Ω–æ –Ω—É–∂–µ–Ω –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –ø—Ä–æ—Ö–æ–¥ –ø–æ —Å—Å—ã–ª–∫–µ."))
			fmt.Println("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –Ω–∏–∫, –Ω–æ —Å—Ç–∞—Ç—É—Å —É–∂–µ –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–π")
			return
		}

		// –µ—Å–ª–∏ –ø—Ä–æ–π–¥–µ–Ω—ã –ø—Ä–æ–≤–µ—Ä–∫–∏
		m.tempName = query.From.UserName
		m.Status = "joinLink" // –º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
		inlineButton := tg.NewInlineKeyboardButtonData("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "joinLink")
		inlineKeyboard := tg.NewInlineKeyboardMarkup(tg.NewInlineKeyboardRow(inlineButton))
		msg := tg.NewMessage(userID, "–ù–∞–ø–∏—à–∏ —Å–≤–æ–µ <b>–∂–µ–ª–∞–Ω–∏–µ</b>üéÖüå≤üéÅüß¶üß£üç∞.\n\n–Ø –ø–µ—Ä–µ–¥–∞–º –µ–≥–æ —Ç–≤–æ–µ–º—É –±—É–¥—É—â–µ–º—É –¢–∞–π–Ω–æ–º—É –°–∞–Ω—Ç–µ. –ú–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å —Å—Ä–∞–∑—É —Å—Å—ã–ª–∫—É –Ω–∞ —Å–≤–æ–µ –∂–µ–ª–∞–Ω–∏–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä, —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä –∏–∑ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞. –ò–ª–∏ —Å—Ä–∞–∑—É –Ω–∞ —Ü–µ–ª—ã–π –≤–∏—à–ª–∏—Å—Ç(—Å–ø–∏—Å–æ–∫ –∂–µ–ª–∞–Ω–∏–π).\n\n–ï—Å–ª–∏ –º–∏–ª–µ–µ —Å—é—Ä–ø—Ä–∏–∑, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å –ø—Ä–∏–≤–µ—Ç —Å–≤–æ–µ–º—É –±—É–¥—É—â–µ–º—É –¥–∞—Ä–∏—Ç–µ–ª—é –∏–ª–∏ –Ω–∞–∂–∞—Ç—å ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª")
		msg.ReplyMarkup = inlineKeyboard // —Å–±–∏–ª–¥–∏–ª–∏ –∫–Ω–æ–ø–∫—É —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –Ω–∞ —ç—Ç–∞–ø–µ –∑–∞–ø—Ä–æ—Å–∞ link
		msg.ParseMode = "HTML"
		bot.Send(msg)
		fmt.Println("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –Ω–∏–∫ ->", query.From.UserName)
	} else if query.Data == "joinLink" {
		_, ok := groups[m.tempGroup]
		if ok {
			if !groups[m.tempGroup].DrawTime.IsZero() {
				ok = false
			}
		}
		if ok {
			if m.Group != 0 {
				bot.Send(tg.NewMessage(userID, "–û–π, —Ç—ã —É–∂–µ –≤ –≥—Ä—É–ø–ø–µ!"))
				fmt.Println("—Å–∫–∏–ø–Ω—É–ª, —Ö–æ—Ç—è —É–∂–µ –≤ –≥—Ä—É–ø–ø–µ")
				return
			} else if m.Status != "joinLink" {
				bot.Send(tg.NewMessage(userID, "–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –í–æ–∑–º–æ–∂–Ω–æ –Ω—É–∂–µ–Ω –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –ø—Ä–æ—Ö–æ–¥ –ø–æ —Å—Å—ã–ª–∫–µ."))
				fmt.Println("–°–∫–∏–ø–Ω—É–ª, –Ω–æ —Å—Ç–∞—Ç—É—Å —É–∂–µ –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–π")
				return
			}

			m.Name = m.tempName
			m.Group = m.tempGroup
			m.tempName = ""
			m.tempGroup = 0
			m.Status = "quo"
			m.ChangeLink = 2
			m.DrawID = 0
			m.WardID = 0
			m.Ward = ""
			grp.Members = append(grp.Members, userID)
			if grp.leaderID == userID {
				msg := tg.NewMessage(userID, "–û—Ç–ª–∏—á–Ω–æ, –≤—Å—ë –≥–æ—Ç–æ–≤–æ –∫ –≤–µ—Å–µ–ª—å—é!üéâ\n\n–†–∞–∑–æ—à–ª–∏ —ç—Ç–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —Å–≤–æ–∏–º –¥—Ä—É–∑—å—è–º, –¥–æ–∂–¥–∏—Å—å –∫–æ–≥–¥–∞ –≤—Å–µ –±—É–¥—É—Ç –≤ —Å–±–æ—Ä–µ‚úÖ –∏ –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ!\n\n–í ¬´–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–æ–π¬ª –º–æ–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ.\n–í ¬´–ö–∞–±–∏–Ω–µ—Ç–µ –°–∞–Ω—Ç—ã¬ª –º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å –∏–º—è –∏ –∂–µ–ª–∞–Ω–∏–µ.")
				keyboard(bot, userID, msg)
				bot.Send(tg.NewMessage(userID, fmt.Sprintf("–ì—Ä—É–ø–ø–∞ –¢–∞–π–Ω—ã—Ö –°–∞–Ω—Ç ¬´%s¬ª\nt.me/%s?start=%d", grp.Name, bot.Self.UserName, m.Group)))

				_, err := db.Exec("INSERT INTO groups (id, leaderid, leadertgname, group_name, description, timeplace, people, draw) VALUES (?, ?, ?, ?, ?, ?, ?, ?)", grp.ID, grp.leaderID, tgname, grp.Name, grp.Description, grp.TimePlace, 1, "NO")
				if err != nil {
					fmt.Println("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã –≤ –ë–î, joinLink –≤ handleButtons.", err)
				}
				_, err = db.Exec("UPDATE users SET leader = ?, grp = ?, grpname = ?, tmpgrp = ?, name = ?, link = ?, changelink = ?, ward = ?, wardid = ?, drawid = ? WHERE id = ?", "YES", grp.ID, grp.Name, m.tempGroup, m.Name, m.Link, m.ChangeLink, m.Ward, m.WardID, m.DrawID, m.ID)
				if err != nil {
					fmt.Println("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —é–∑–µ—Ä–∞-–ª–∏–¥–µ—Ä–∞ –≤ –ë–î, joinLink –≤ handleButtons.", err)
				}

				fmt.Println("–ì—Ä—É–ø–ø–∞ —Å–æ–∑–¥–∞–Ω–∞. –õ–∏–¥–µ—Ä –Ω–µ —É–∫–∞–∑–∞–ª —Å–≤–æ–µ –∂–µ–ª–∞–Ω–∏–µ.")
				return
			}
			msg := tg.NewMessage(userID, "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n\n–¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ <b>–ö–∞–±–∏–Ω–µ—Ç—É –°–∞–Ω—Ç—ã</b>. –¢–∞–º —Ç—ã —Å–º–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –≥—Ä—É–ø–ø—ã, —Å–ø–∏—Å–æ–∫ –°–∞–Ω—Ç, –ø–æ–º–µ–Ω—è—Ç—å –∏–º—è –∏–ª–∏ –∂–µ–ª–∞–Ω–∏–µ! –¢–∞–∫ –∂–µ –¥–æ—Å—Ç—É–ø–µ–Ω <b>—á–∞—Ç</b>. –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–Ω–µ, –∞ –µ–≥–æ —É–≤–∏–¥—è—Ç –≤—Å–µ –≤ –≥—Ä—É–ø–ø–µ!\n\n–í–æ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–ø–ø–µ:")
			keyboard(bot, userID, msg)
			groupInfo(bot, userID)
			stringline := "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º <b>" + m.Name + "</b> –≤ ¬´" + grp.Name + "¬ª –∏ —Ä–∞–¥—É–µ–º—Å—è –∑–∞ –Ω–æ–≤–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ!"
			for _, id := range grp.Members {
				msg = tg.NewMessage(id, stringline)
				msg.ParseMode = "HTML"
				bot.Send(msg)
			}
			_, err := db.Exec("UPDATE users SET leader = ?, grp = ?, grpname = ?, tmpgrp = ?, name = ?, link = ?, changelink = ?, ward = ?, wardid = ?, drawid = ? WHERE id = ?", "NO", grp.ID, grp.Name, m.tempGroup, m.Name, m.Link, m.ChangeLink, m.Ward, m.WardID, m.DrawID, m.ID)
			if err != nil {
				fmt.Println("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —é–∑–µ—Ä–∞ –≤ –ë–î, joinLink –≤ handleButtons", err)
			}

			_, err = db.Exec("UPDATE groups SET people = ?", len(grp.Members))
			if err != nil {
				fmt.Println("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è People –≤ joinlink handleButtons", err)
			}
			fmt.Println("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—à–µ–ª –≤ –≥—Ä—É–ø–ø—É, –Ω–µ —É–∫–∞–∑–∞–≤ –∂–µ–ª–∞–Ω–∏–µ")
		} else {
			bot.Send(tg.NewMessage(userID, "–ì—Ä—É–ø–ø–∞, –∫—É–¥–∞ —à–ª–æ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ, –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–ª–∏ –∑–∞–∫—Ä—ã–ª–∞ —Å–≤–æ–∏ –¥–≤–µ—Ä–∏, –ø–æ–∫–∞ –∑–∞–ø–æ–ª–Ω—è–ª–∏—Å—å –¥–∞–Ω–Ω—ã–µ. –¢–µ–ø–µ—Ä—å –≤–æ–π—Ç–∏ –≤ –Ω–µ—ë –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.üò¢"))
			fmt.Println("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —É—Å–ø–µ–ª –∑–∞—Å–∫–æ—á–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É —Ç.–∫. –∏–ª–∏ –ø–æ–º–µ–Ω—è–ª–∞—Å—å —Å—Å—ã–ª–∫–∞ –∏–ª–∏ –≥—Ä—É–ø–ø–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ.")
			m.tempName = ""
			m.tempGroup = 0
			m.Status = ""
		}
	} else if query.Data == "groupInfo" {
		groupInfo(bot, userID)
	} else if strings.Contains(query.Data, "Draw") {
		draw(bot, userID, query.Data, db)
	} else if strings.Contains(query.Data, "ChangeInfo") {
		changeInfo(bot, userID, query.Data)
	} else if query.Data == "repeatLink" {
		repeatLink(bot, userID)
	} else if strings.Contains(query.Data, "DelLink") {
		delLink(bot, userID, query.Data, db)
	} else if strings.Contains(query.Data, "Exclude") {
		exclude(bot, userID, query.Data, db)
	} else if strings.Contains(query.Data, "DelGroup") {
		delGroup(bot, userID, query.Data, db)
	} else if strings.Contains(query.Data, "ChangeName") {
		changeName(bot, userID, query, db)
	} else if strings.Contains(query.Data, "ShowLink") {
		showLink(bot, userID, query.Data, db)
	} else if strings.Contains(query.Data, "LeaveGroup") {
		leaveGroup(bot, userID, query.Data, db)
	} else if query.Data == "ImSanta" {
		ImSanta(bot, userID)
	} else if query.Data == "donut" {
		msg := tg.NewMessage(userID, "–ë–ª–∞–≥–æ–¥–∞—Ä—é –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É –º–æ–µ–π —Ä–∞–±–æ—Ç—ã.üòä\n–≠—Ç–æ –º–æ–π –ø–µ—Ä–≤—ã–π –ø—Ä–æ–µ–∫—Ç, –ø–æ—Ç–æ–º—É –±—É–¥—É –æ—á–µ–Ω—å —Ä–∞–¥ –ø—Ä–æ—á–∏—Ç–∞—Ç—å –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –∫ –ø–µ—Ä–µ–≤–æ–¥—É –≤–∞—à –æ—Ç–∑—ã–≤.‚úçÔ∏è\n\n–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã T-–ë–∞–Ω–∫–∞:\n\n<b>2200 7008 9613 9697</b>\n\n–ò–º—è: <b>–ú–∏—Ä–≤–∞–π—Å</b>")
		msg.ParseMode = "HTML"
		bot.Send(msg)
	} else if strings.Contains(query.Data, "AfterGroup") {
		if query.Data == "cancelcontAfterGroup" {
			m.Status = ""
			bot.Send(tg.NewMessage(userID, "–í—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É –æ—Ç–º–µ–Ω–µ–Ω–æ‚ú®"))
			fmt.Println("–í—ã–±—Ä–∞–ª –æ—Ç–º–µ–Ω—É –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–µ–¥. –¥–∞–Ω–Ω—ã—Ö")
		} else if strings.Contains(query.Data, "contAfterGroup") {
			groupID, err := strconv.ParseInt(strings.TrimPrefix(query.Data, "contAfterGroup"), 10, 64)
			if err != nil {
				bot.Send(tg.NewMessage(userID, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —ç—Ç–æ –º–æ–∂–µ—Ç –ø–æ–ø—Ä–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –±–æ—Ç–∞. –ö–æ–≥–¥–∞ –æ–Ω —Ä–µ—à–∏—Ç —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ."))
				fmt.Println("–≤ afterGroup –Ω–µ —Å–ø–∞—Ä—Å–∏–ª—Å—è –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã. –ù–ê–î–û –ü–†–û–í–ï–†–ò–¢–¨!!!!! –ö–ê–ü–° –ß–¢–û–ë–´ –ó–ê–ú–ï–¢–ò–õ", err)
				return
			}
			fmt.Println("–í—ã–±—Ä–∞–ª –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤—Å—Ç—É–ø–∞—Ç—å –∏ —Å—Ç–∏—Ä–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö")
			if m.Status == "chooseyourdestiny" {
				m.DrawID = 0
				m.WardID = 0
				m.Ward = ""
				m.Link = ""
				m.tempGroup = groupID
				m.Status = ""
				_, err := db.Exec("UPDATE users SET ward = ?, wardid = ?, drawid = ? WHERE id = ?", "", 0, 0, userID)
				if err != nil {
					fmt.Println("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ —é–∑–µ—Ä–∞ –≤ –ë–î afterGroup. UserID:", userID, err)
				}
			}
			startJoin(bot, update, userID, groupID)
		} else if query.Data == "createcancelAfterGroup" {
			m.Status = ""
			bot.Send(tg.NewMessage(userID, "–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –æ—Ç–º–µ–Ω–µ–Ω–æ‚ú®"))
			fmt.Println("–í—ã–±—Ä–∞–ª –æ—Ç–º–µ–Ω—É —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–µ–¥. –¥–∞–Ω–Ω—ã—Ö")
		} else if query.Data == "createAfterGroup" {
			fmt.Println("–í—ã–±—Ä–∞–ª –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—ã –∏ —Å—Ç–∏—Ä–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö")
			if m.Status == "chooseyourdestiny" {
				m.DrawID = 0
				m.WardID = 0
				m.Ward = ""
				m.Status = ""
				m.Link = ""
				_, err := db.Exec("UPDATE users SET ward = ?, wardid = ?, drawid = ? WHERE id = ?", "", 0, 0, userID)
				if err != nil {
					fmt.Println("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ —é–∑–µ—Ä–∞-–ª–∏–¥–µ—Ä–∞ –≤ –ë–î afterGroup. UserID:", userID)
				}
			}
			create_Group(bot, userID)
		}
	} else {
		msg := tg.NewMessage(userID, "–ù–µ—Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–∞—è –∫–Ω–æ–ø–∫–∞.\n\n–í—ã—Ö–æ–¥–∏–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, —Ç–∞–∫ —á—Ç–æ —Ç–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –Ω–æ–≤—ã–º–∏! –ü–æ–¥–≥—Ä—É–∑–∏–ª –∏—Ö —Ç–µ–±–µ —Ç–æ–ª—å–∫–æ —á—Ç–æ.\n\n–ö–Ω–æ–ø–∫–∏ —á—Ç–æ –æ—Å—Ç–∞–ª–∏—Å—å –≤ —á–∞—Ç–µ —É—Å—Ç–∞—Ä–µ–ª–∏ –∏ –ø—Ä–æ—Å—Ç–æ –≤–µ—Ä–Ω—É—Ç —Ç–µ–±—è –∫ —ç—Ç–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é (:\n\n–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –Ω–µ—Ä–µ—à–∞–µ–º–∞—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–±–ª–µ–º–∞, –ø–∏—à–∏ –Ω–∞ email: sataiiip210@gmail.com")
		keyboard(bot, userID, msg)
		fmt.Println("–ù–µ—Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–∞—è –∫–Ω–æ–ø–∫–∞")
	}
}

func start_Command(bot *tg.BotAPI, userID int64) {
	if members[userID].Group != 0 {
		info(bot, userID)
		fmt.Println("–Æ–∑–µ—Ä —Å—Ç–∞—Ä—Ç–∞–Ω—É–ª, –±—É–¥—É—á–∏ —É–∂–µ –≤ –≥—Ä—É–ø–ø–µ. –ó–∞–ø—É—â–µ–Ω–æ –∏–Ω—Ñ–æ –∫–∞–∫ –∑–∞–≥–ª—É—à–∫–∞")
		return
	} else if members[userID].Status != "" {
		info(bot, userID)
		fmt.Println("–Æ–∑–µ—Ä —Å—Ç–∞—Ä—Ç–∞–Ω—É–ª, –∏–º–µ—è –Ω–µ–¥–µ—Ñ–æ–ª—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å. –ó–∞–ø—É—â–µ–Ω–æ –∏–Ω—Ñ–æ –∫–∞–∫ –∑–∞–≥–ª—É—à–∫–∞")
		return
	}

	buttons := []tg.InlineKeyboardButton{
		tg.NewInlineKeyboardButtonData("–†–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ–± –∏–≥—Ä–µüìú", "info"),
		tg.NewInlineKeyboardButtonData("–°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—ÉüöÄ", "create_Group"),
	}
	var rows [][]tg.InlineKeyboardButton
	for _, btn := range buttons {
		row := []tg.InlineKeyboardButton{btn}
		rows = append(rows, row)
	}
	inlineKeyboard := tg.NewInlineKeyboardMarkup(rows...)

	image := tg.NewPhoto(userID, tg.FilePath("./start.png"))
	image.Caption = "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –±—É–¥—É—â–µ–≥–æ –æ–±–ª–∞–¥–∞—Ç–µ–ª—è –ø–æ–¥–∞—Ä–∫–æ–≤!üéÅ\n–Ø ‚Äî –ë–æ—Ç –°–µ–∫—Ä–µ—Ç–Ω—ã–π –°–∞–Ω—Ç–∞ –∏ —É –º–µ–Ω—è –µ—Å—Ç—å –º–∏—Å—Å–∏—è: –ø–æ–º–æ–≥–∞—Ç—å –ª—é–¥—è–º –∏–≥—Ä–∞—Ç—å –≤ <b>–¢–∞–π–Ω–æ–≥–æ –°–∞–Ω—Ç—É</b>.\n\n–°–æ–±–µ—Ä–∏—Ç–µ—Å—å –≤ –≥—Ä—É–ø–ø—É, –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏ –∫–∞–∂–¥–æ–º—É —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—Å—è –µ–≥–æ –¢–∞–π–Ω—ã–π –°–∞–Ω—Ç–∞.üéâ\n\n–ï—Å–ª–∏ –µ—â–µ –Ω–µ –∑–Ω–∞–µ—à—å –ø—Ä–∞–≤–∏–ª –∏–≥—Ä—ã, —Å –Ω–∏–º–∏ –º–æ–∂–Ω–æ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É <b>¬´–†–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ–± –∏–≥—Ä–µ¬ª.</b>üìú\n\n–ê –º–æ–∂–Ω–æ —Å—Ä–∞–∑—É –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ —Å–æ–∑–¥–∞–Ω–∏—é –≥—Ä—É–ø–ø—ã!üöÄ"
	image.ParseMode = "HTML"
	image.ReplyMarkup = inlineKeyboard

	bot.Send(image)
	fmt.Println("–°–¢–ê–†–¢!")
}

func create_Group(bot *tg.BotAPI, userID int64) {
	state := members[userID].Status
	if members[userID].Group != 0 {
		if groups[members[userID].Group].leaderID == userID {
			bot.Send(tg.NewMessage(userID, "–û–π, —É —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å —Å–≤–æ—è –≥—Ä—É–ø–ø–∞! –í–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–Ω–æ–ø–∫–æ–π ¬´–ö–∞–±–∏–Ω–µ—Ç –°–∞–Ω—Ç—ã¬ª. –¢–∞–º –µ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–ø–ø–µ."))
			fmt.Println("–õ–∏–¥–µ—Ä –ø–æ–≤—Ç–æ—Ä–Ω–æ –Ω–∞–∂–∞–ª —Å–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É")
			return
		}
		bot.Send(tg.NewMessage(userID, "–û–π, —Ç—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—à—å –≤ –≥—Ä—É–ø–ø–µ! –í–æ—Å–ø–æ–ª—å–∑—É–π—Å—è ¬´–ö–∞–±–∏–Ω–µ—Ç–æ–º –°–∞–Ω—Ç—ã¬ª. –¢–∞–º –µ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–ø–ø–µ."))
		fmt.Println(userID, "–£–∂–µ —É—á–∞—Å—Ç–Ω–∏–∫ –Ω–∞–∂–∞–ª —Å–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É")
	} else if state == "createNameGroup" {
		bot.Send(tg.NewMessage(userID, "–û–π, –≥—Ä—É–ø–ø–∞ —É–∂–µ —Å–æ–∑–¥–∞–µ—Ç—Å—è! –Ø –æ–∂–∏–¥–∞—é –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–≤–æ–µ–π –≥—Ä—É–ø–ø—ã"))
		fmt.Println("–ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –Ω–∞–∂–∞—Ç–∏–µ. –û–∂–∏–¥–∞–ª—Å—è –≤–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã")
	} else if state == "createDscript" {
		bot.Send(tg.NewMessage(userID, "–û–π, –≥—Ä—É–ø–ø–∞ —É–∂–µ —Å–æ–∑–¥–∞–µ—Ç—Å—è! –Ø –æ–∂–∏–¥–∞—é –≤–≤–æ–¥–∞ –ø—Ä–∞–≤–∏–ª —Ç–≤–æ–µ–π –≥—Ä—É–ø–ø—ã"))
		fmt.Println("–ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –Ω–∞–∂–∞—Ç–∏–µ. –û–∂–∏–¥–∞–ª—Å—è –≤–≤–æ–¥ –ø—Ä–∞–≤–∏–ª –≥—Ä—É–ø–ø—ã")
	} else if state == "createTimePlace" {
		bot.Send(tg.NewMessage(userID, "–û–π, –≥—Ä—É–ø–ø–∞ —É–∂–µ —Å–æ–∑–¥–∞–µ—Ç—Å—è! –Ø –æ–∂–∏–¥–∞—é –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ –∏ –º–µ—Å—Ç–∞, –¥–ª—è –æ–±–º–µ–Ω–∞ –ø–æ–¥–∞—Ä–∫–∞–º–∏ –≤ —Ç–≤–æ–µ–π –≥—Ä—É–ø–ø–µ."))
		fmt.Println("–ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –Ω–∞–∂–∞—Ç–∏–µ. –û–∂–∏–¥–∞–ª—Å—è –≤–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏ –∏ –º–µ—Å—Ç–∞ –≥—Ä—É–ø–ø—ã")
	} else if state == "joinName" {
		bot.Send(tg.NewMessage(userID, "–û–π, –≥—Ä—É–ø–ø–∞ –ø–æ—á—Ç–∏ —Å–æ–∑–¥–∞–Ω–∞! –Ø –æ–∂–∏–¥–∞—é –≤–≤–æ–¥–∞ —Ç–≤–æ–µ–≥–æ –∏–º–µ–Ω–∏"))
		fmt.Println("–ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –Ω–∞–∂–∞—Ç–∏–µ. –û–∂–∏–¥–∞–ª—Å—è –≤–≤–æ–¥ –ø—Ä–∞–≤–∏–ª –≥—Ä—É–ø–ø—ã")
	} else if state == "joinLink" {
		bot.Send(tg.NewMessage(userID, "–û–π, –≥—Ä—É–ø–ø–∞ –ø–æ—á—Ç–∏ —Å–æ–∑–¥–∞–Ω–∞! –Ø –æ–∂–∏–¥–∞—é –≤–≤–æ–¥–∞ —Ç–≤–æ–µ–≥–æ –∂–µ–ª–∞–Ω–∏—è"))
		fmt.Println("–ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –Ω–∞–∂–∞—Ç–∏–µ. –û–∂–∏–¥–∞–ª—Å—è –≤–≤–æ–¥ –ø—Ä–∞–≤–∏–ª –≥—Ä—É–ø–ø—ã")
	} else if members[userID].DrawID != 0 {
		members[userID].Status = "chooseyourdestiny"
		buttons := []tg.InlineKeyboardButton{
			tg.NewInlineKeyboardButtonData("–û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µüõë", "createcancelAfterGroup"),
			tg.NewInlineKeyboardButtonData("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∏ —Å—Ç–µ—Ä–µ—Ç—å –¥–∞–Ω–Ω—ã–µ‚û°Ô∏è", "createAfterGroup"),
		}
		var rows [][]tg.InlineKeyboardButton
		for _, btn := range buttons {
			row := []tg.InlineKeyboardButton{btn}
			rows = append(rows, row)
		}
		inlineKeyboard := tg.NewInlineKeyboardMarkup(rows...)
		stringline := "–í–Ω–æ–≤—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –¢—ã —Å–æ–∑–¥–∞–µ—à—å <b>–Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É</b>, –∏ –ø–µ—Ä–µ–¥ —ç—Ç–∏–º —è –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç—å —Ç–µ–±—è! –û—Ç <b>–ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —É—á–∞—Å—Ç–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ</b> —Ç–≤–æ–µ–≥–æ –∂–µ–ª–∞–Ω–∏—è –∏ —Ç–≤–æ–µ–≥–æ –ü–æ–¥–æ–ø–µ—á–Ω–æ–≥–æ. –ï—Å–ª–∏ —Ç—ã –ø—Ä–æ–¥–æ–ª–∂–∏—à—å —Å–æ–∑–¥–∞–≤–∞—Ç—å –≥—Ä—É–ø–ø—É, <b>–æ–Ω–∏ –±—É–¥—É—Ç —Å—Ç—ë—Ä—Ç—ã</b> –∏ —Ç—ã –ø–æ—Ç–µ—Ä—è–µ—à—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–º–µ–Ω—è—Ç—å —Å–≤–æ–µ –∂–µ–ª–∞–Ω–∏–µ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º –¢–∞–π–Ω–æ–≥–æ –°–∞–Ω—Ç—ã –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≥—Ä—É–ø–ø—ã. –¢–∞–∫–∂–µ —Ç—ã —É—Ç—Ä–∞—Ç–∏—à—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –Ω–∞–ø–æ–º–Ω–∏—Ç—å —Å–µ–±–µ –∂–µ–ª–∞–Ω–∏–µ —Ç–≤–æ–µ–≥–æ –ü–æ–¥–æ–ø–µ—á–Ω–æ–≥–æ.\n\n–ü—Ä–∏ —ç—Ç–æ–º, –µ—Å–ª–∏ —Ç–≤–æ–π –ü–æ–¥–æ–ø–µ—á–Ω—ã–π —Å–æ—Ö—Ä–∞–Ω–∏—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–º–µ–Ω—ã –∂–µ–ª–∞–Ω–∏—è –∏ –≤–æ—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏–º–∏, —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —ç—Ç–æ–º –¥–æ–π–¥—É—Ç –¥–æ —Ç–µ–±—è. –≠—Ç–æ —Å–≤—è–∑–∞–Ω–æ —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º–∏ –∞—Å–ø–µ–∫—Ç–∞–º–∏ –º–æ–µ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã.\n\n–Ø —Ç–∞–∫–∂–µ –Ω–µ —É—á–∏—Ç—ã–≤–∞—é, –∫–∞–∫ –¥–∞–≤–Ω–æ —Ç—ã –±—ã–ª –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≥—Ä—É–ø–ø–µ, –∏ –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–º–µ–Ω—ã –∂–µ–ª–∞–Ω–∏—è —É —Ç–µ–±—è –∏–ª–∏ —Ç–≤–æ–µ–≥–æ –ü–æ–¥–æ–ø–µ—á–Ω–æ–≥–æ, –ø–æ—ç—Ç–æ–º—É –∑–∞—Ä–∞–Ω–µ–µ –∏–∑–≤–∏–Ω—è—é—Å—å –∑–∞ –≤–æ–∑–º–æ–∂–Ω–æ–µ –∏–∑–ª–∏—à–Ω–µ–µ –±–µ—Å–ø–æ–∫–æ–π—Å—Ç–≤–æ!\n\n–¢–µ–ø–µ—Ä—å, –∫–æ–≥–¥–∞ —Ç—ã –∑–Ω–∞–µ—à—å –≤—Å–µ –Ω—é–∞–Ω—Å—ã, —Ç–µ–±–µ <b>–Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å:</b>"
		msg := tg.NewMessage(userID, stringline)
		msg.ReplyMarkup = inlineKeyboard
		msg.ParseMode = "HTML"
		bot.Send(msg)
		fmt.Println("–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã —Å –∏–º–µ—é—â–∏–º–∏—Å—è –¥–∞–Ω–Ω—ã–º–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è")
	} else if members[userID].Group == 0 { // –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π —Å–ª—É—á–∞–π
		members[userID].Status = "createNameGroup"
		image := tg.NewPhoto(userID, tg.FilePath("./start2.png"))
		image.Caption = "–ü—Ä–∏—à–ª–æ –≤—Ä–µ–º—è –∑–∞–ø–µ—á–∞—Ç–ª–µ—Ç—å –≤–∞—à—É —Å—É—Ç—å –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏! –ù–∞–ø–∏—à–∏ <b>–Ω–∞–∑–≤–∞–Ω–∏–µ</b> –¥–ª—è —Å–≤–æ–µ–π –≥—Ä—É–ø–ø—ãüåü.\n\n–ü—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è –æ—Ç 2 –¥–æ 60 —Å–∏–º–≤–æ–ª–æ–≤."
		image.ParseMode = "HTML"
		bot.Send(image)
		fmt.Println("–ó–∞–ø—Ä–æ—Å –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã")
	}
}

func join_Member(bot *tg.BotAPI, groupID, userID int64) {
	state := members[userID].Status
	if members[userID].Group != 0 { // –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –≥—Ä—É–ø–ø–µ
		bot.Send(tg.NewMessage(userID, "–û–π, —Ç—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—à—å –≤ –≥—Ä—É–ø–ø–µ"))
		fmt.Println("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª —É–∂–µ –≤ –≥—Ä—É–ø–ø–µ, –Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞–ª –∑–∞–π—Ç–∏ –µ—â–µ —Ä–∞–∑")
		return
	} else if state == "joinName" || state == "joinLink" { // –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—Ö–æ–¥
		if state == "joinName" {
			bot.Send(tg.NewMessage(userID, "–û–π, —Ç—ã —É–∂–µ –≤—Å—Ç—É–ø–∞–µ—à—å –≤ –≥—Ä—É–ø–ø—É! –Ø –æ–∂–∏–¥–∞—é –≤–≤–æ–¥–∞ —Ç–≤–æ–µ–≥–æ –∏–º–µ–Ω–∏"))
			fmt.Println("–ü–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—Ö–æ–¥ –≤ –≥—Ä—É–ø–ø—É. –û–∂–∏–¥–∞–ª—Å—è –≤–≤–æ–¥ –∏–º–µ–Ω–∏")
		} else {
			bot.Send(tg.NewMessage(userID, "–û–π, —Ç—ã —É–∂–µ –≤—Å—Ç—É–ø–∞–µ—à—å –≤ –≥—Ä—É–ø–ø—É! –Ø –æ–∂–∏–¥–∞—é –≤–≤–æ–¥–∞ —Ç–≤–æ–µ–≥–æ –∂–µ–ª–∞–Ω–∏—è"))
			fmt.Println("–ü–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—Ö–æ–¥ –≤ –≥—Ä—É–ø–ø—É. –û–∂–∏–¥–∞–ª—Å—è –≤–≤–æ–¥ –∂–µ–ª–∞–Ω–∏—è")
		}
		return
	} else if _, ok := groups[groupID]; !ok { // –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ª–æ–º–∞–Ω–Ω—É—é —Å—Å—ã–ª–∫—É
		bot.Send(tg.NewMessage(userID, "–ì—Ä—É–ø–ø—ã, –≤ –∫–æ—Ç–æ—Ä—É—é –≤–µ–ª–∞ —ç—Ç–∞ —Å—Å—ã–ª–∫–∞, —É–∂–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.\n\n–°–ø—Ä–æ—Å–∏ –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É —É —á–µ–ª–æ–≤–µ–∫–∞, —á—Ç–æ –¥–∞–ª —Ç–µ–±–µ —ç—Ç—É.\n\n–ò–ª–∏ —Å–æ–∑–¥–∞–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é –≥—Ä—É–ø–ø—É!"))
		fmt.Println("–ù–µ–∞–∫—Ç—É–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞")
		return
	} else if groupID == 0 { // –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—Ö–æ–¥ –≤ –≥—Ä—É–ø–ø—É 0
		bot.Send(tg.NewMessage(userID, "–î—É–º–∞–µ—à—å, —ç—Ç–æ —Å–º–µ—à–Ω–æ? –ó–∞ —Ç–æ–±–æ–π —É–∂–µ –≤—ã–µ—Ö–∞–ª–∏. –°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ –±–µ—Å–ø–æ–ª–µ–∑–Ω–æ!"))
		fmt.Println("–í—Ö–æ–¥ –≤ –≥—Ä—É–ø–ø—É 0 !*ALARM*!")
		return
	} else if !groups[members[userID].Group].DrawTime.IsZero() { // –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–æ—à–µ–¥—à–µ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
		bot.Send(tg.NewMessage(userID, "–û–π, –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ —É–∂–µ —Å–ª—É—á–∏–ª–æ—Å—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ. –í—Ö–æ–¥ –≤ –Ω–µ—ë –∑–∞–∫—Ä—ã—Ç"))
		fmt.Println("–ó–∞—Ö–æ–¥ –≤ –≥—Ä—É–ø–ø—É, –≥–¥–µ —É–∂–µ –ø—Ä–æ—à–ª–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ")
		return
	} else if members[userID].DrawID != 0 {
		members[userID].Status = "chooseyourdestiny"
		buttons := []tg.InlineKeyboardButton{
			tg.NewInlineKeyboardButtonData("–û—Ç–º–µ–Ω–∏—Ç—å –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µüõë", "cancelcontAfterGroup"),
			tg.NewInlineKeyboardButtonData("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –∏ —Å—Ç–µ—Ä–µ—Ç—å –¥–∞–Ω–Ω—ã–µ‚û°Ô∏è", "contAfterGroup"+strconv.FormatInt(groupID, 10)),
		}
		var rows [][]tg.InlineKeyboardButton
		for _, btn := range buttons {
			row := []tg.InlineKeyboardButton{btn}
			rows = append(rows, row)
		}
		inlineKeyboard := tg.NewInlineKeyboardMarkup(rows...)
		stringline := "–í–Ω–æ–≤—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –¢—ã –≤—Å—Ç—É–ø–∞–µ—à—å –≤ <b>–≥—Ä—É–ø–ø—É</b>, –∏ –ø–µ—Ä–µ–¥ —ç—Ç–∏–º —è –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç—å —Ç–µ–±—è! –û—Ç <b>–ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —É—á–∞—Å—Ç–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ</b> —Ç–≤–æ–µ–≥–æ –∂–µ–ª–∞–Ω–∏—è –∏ —Ç–≤–æ–µ–≥–æ –ü–æ–¥–æ–ø–µ—á–Ω–æ–≥–æ. –ï—Å–ª–∏ —Ç—ã –ø—Ä–æ–¥–æ–ª–∂–∏—à—å –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É, <b>–æ–Ω–∏ –±—É–¥—É—Ç —Å—Ç—ë—Ä—Ç—ã</b> –∏ —Ç—ã –ø–æ—Ç–µ—Ä—è–µ—à—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–º–µ–Ω—è—Ç—å —Å–≤–æ–µ –∂–µ–ª–∞–Ω–∏–µ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º –¢–∞–π–Ω–æ–≥–æ –°–∞–Ω—Ç—ã –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≥—Ä—É–ø–ø—ã. –¢–∞–∫–∂–µ —Ç—ã —É—Ç—Ä–∞—Ç–∏—à—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –Ω–∞–ø–æ–º–Ω–∏—Ç—å —Å–µ–±–µ –∂–µ–ª–∞–Ω–∏–µ —Ç–≤–æ–µ–≥–æ –ü–æ–¥–æ–ø–µ—á–Ω–æ–≥–æ.\n\n–ü—Ä–∏ —ç—Ç–æ–º, –µ—Å–ª–∏ —Ç–≤–æ–π –ü–æ–¥–æ–ø–µ—á–Ω—ã–π —Å–æ—Ö—Ä–∞–Ω–∏—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–º–µ–Ω—ã –∂–µ–ª–∞–Ω–∏—è –∏ –≤–æ—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏–º–∏, —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —ç—Ç–æ–º –¥–æ–π–¥—É—Ç –¥–æ —Ç–µ–±—è. –≠—Ç–æ —Å–≤—è–∑–∞–Ω–æ —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º–∏ –∞—Å–ø–µ–∫—Ç–∞–º–∏ –º–æ–µ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã.\n\n–Ø —Ç–∞–∫–∂–µ –Ω–µ —É—á–∏—Ç—ã–≤–∞—é, –∫–∞–∫ –¥–∞–≤–Ω–æ —Ç—ã –±—ã–ª –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≥—Ä—É–ø–ø–µ, –∏ –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–º–µ–Ω—ã –∂–µ–ª–∞–Ω–∏—è —É —Ç–µ–±—è –∏–ª–∏ —Ç–≤–æ–µ–≥–æ –ü–æ–¥–æ–ø–µ—á–Ω–æ–≥–æ, –ø–æ—ç—Ç–æ–º—É –∑–∞—Ä–∞–Ω–µ–µ –∏–∑–≤–∏–Ω—è—é—Å—å –∑–∞ –≤–æ–∑–º–æ–∂–Ω–æ–µ –∏–∑–ª–∏—à–Ω–µ–µ –±–µ—Å–ø–æ–∫–æ–π—Å—Ç–≤–æ!\n\n–¢–µ–ø–µ—Ä—å, –∫–æ–≥–¥–∞ —Ç—ã –∑–Ω–∞–µ—à—å –≤—Å–µ –Ω—é–∞–Ω—Å—ã, —Ç–µ–±–µ <b>–Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å:</b>"
		msg := tg.NewMessage(userID, stringline)
		msg.ReplyMarkup = inlineKeyboard
		msg.ParseMode = "HTML"
		bot.Send(msg)
		fmt.Println("–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É —Å –∏–º–µ—é—â–∏–º–∏—Å—è –¥–∞–Ω–Ω—ã–º–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è")
		return
	}

	// –µ—Å–ª–∏ –ø—Ä–æ–π–¥–µ–Ω—ã –ø—Ä–æ–≤–µ—Ä–∫–∏
	members[userID].tempGroup = groupID // –∑–∞–¥–∞–µ–º tempGroup
	var rows [][]tg.InlineKeyboardButton
	button := []tg.InlineKeyboardButton{
		tg.NewInlineKeyboardButtonData("–†–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ–± –∏–≥—Ä–µüìú", "info"),
	}
	rows = append(rows, button)
	button = []tg.InlineKeyboardButton{
		tg.NewInlineKeyboardButtonData("–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –≥—Ä—É–ø–ø–µüöÄ", "startJoin"),
	}
	rows = append(rows, button)
	inlineKeyboard := tg.NewInlineKeyboardMarkup(rows...)
	image := tg.NewPhoto(userID, tg.FilePath("./start5.png"))
	image.ReplyMarkup = inlineKeyboard
	image.Caption = "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è, —á–µ–ª–æ–≤–µ–∫! üéâ\n\n–Ø ‚Äî –ë–æ—Ç –°–µ–∫—Ä–µ—Ç–Ω—ã–π –°–∞–Ω—Ç–∞, —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–π –∏–≥—Ä–µ <b>–¢–∞–π–Ω—ã–π –°–∞–Ω—Ç–∞</b>! –ï—Å–ª–∏ —Ç—ã —É–∂–µ –∑–Ω–∞–∫–æ–º —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –∏–≥—Ä—ã, –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ –≥—Ä—É–ø–ø–µ –∏ –Ω–∞—á–Ω–∏ –≤–µ—Å–µ–ª—å–µ —Å –¥—Ä—É–∑—å—è–º–∏! üöÄ\n\n–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ —É–∑–Ω–∞—Ç—å, –∫–∞–∫ –ø—Ä–æ—Ö–æ–¥–∏—Ç –∏–≥—Ä–∞? –ñ–º–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É!üìú"
	image.ParseMode = "HTML"
	bot.Send(image)
	fmt.Println("–í—Ö–æ–¥ –ø–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—é")
}

func info(bot *tg.BotAPI, userID int64) {
	button := []tg.InlineKeyboardButton{}
	stringline := "–û—Ç–∫—Ä—ã—Ç–æ –∏–Ω—Ñ–æ "
	if members[userID].DrawID != 0 { // –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è —É—á–∞—Å—Ç–≤–æ–≤–∞—à–∏—Ö.
	} else if members[userID].tempGroup != 0 && groups[members[userID].tempGroup].leaderID != userID {
		button = []tg.InlineKeyboardButton{
			tg.NewInlineKeyboardButtonData("–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –≥—Ä—É–ø–ø–µüöÄ", "startJoin"),
		}
		stringline = stringline + "—Å –∫–Ω–æ–ø–∫–æ–π –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è"
	} else if members[userID].Status == "" {
		button = []tg.InlineKeyboardButton{
			tg.NewInlineKeyboardButtonData("–°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—ÉüöÄ", "create_Group"),
		}
		stringline = stringline + "—Å –∫–Ω–æ–ø–∫–æ–π —Å–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É"
	}
	inlineKeyboard := tg.NewInlineKeyboardMarkup(button)
	msg := tg.NewMessage(userID, "–Ø –ø–æ–º–æ–≥–∞—é <b>—Å–æ–∑–¥–∞—Ç—å</b> –∏ <b>—Å–æ–±—Ä–∞—Ç—å</b> –≥—Ä—É–ø–ø—É, –∞ –ø–æ—Ç–æ–º –ø—Ä–æ–≤–µ—Å—Ç–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ (–µ—â–µ –Ω–∞–∑—ã–≤–∞—é—Ç –∂–µ—Ä–µ–±—å–µ–≤–∫–æ–π) –∏–≥—Ä–æ–∫–æ–≤ –º–µ–∂–¥—É —Å–æ–±–æ–π –≤ —Ä–æ–ª–∏ —Ç–∞–π–Ω—ã—Ö –°–∞–Ω—Ç.üéâ\n\n–£ —Å–æ–∑–¥–∞—é—â–µ–≥–æ –≥—Ä—É–ø–ø—É —Å–ø—Ä–∞—à–∏–≤–∞—é –µ—ë –Ω–∞–∑–≤–∞–Ω–∏–µ, –ø—Ä–∞–≤–∏–ª–∞, –∫–æ—Ç–æ—Ä—ã–µ –æ–Ω —Ö–æ—á–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—åüìú, –∞ —Ç–∞–∫–∂–µ –≤—Ä–µ–º—è –∏ –º–µ—Å—Ç–æ –æ–±–º–µ–Ω–∞ –ø–æ–¥–∞—Ä–∫–∞–º–∏.üéÅ\n\n–ó–∞—Ç–µ–º –æ–Ω —Ä–∞—Å—Å—ã–ª–∞–µ—Ç –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É –∫–∞–∂–¥–æ–º—É –°–∞–Ω—Ç–µ.‚úâÔ∏è\n\n–°–∞–Ω—Ç–∞ —É–∫–∞–∑—ã–≤–∞–µ—Ç —Å–≤–æ–µ –∏–º—è –∏ –Ω–∞ —Å–≤–æ–µ —É—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –æ—Å—Ç–∞–≤–ª—è–µ—Ç –∂–µ–ª–∞–Ω–∏–µ.üéâ\n\n–ö–∞–∫ —Ç–æ–ª—å–∫–æ –≤—Å–µ –±—É–¥—É—Ç –≥–æ—Ç–æ–≤—ã‚úÖ, –æ—Ä–≥–∞–Ω–∏–∑—É—é—â–∏–π –Ω–∞–∂–∏–º–∞–µ—Ç –∫–Ω–æ–ø–∫—É –∑–∞–ø—É—Å–∫–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—èüöÄ, –∏ –∫–∞–∂–¥—ã–π –°–∞–Ω—Ç–∞ –ø–æ–ª—É—á–∏—Ç —Å–≤–æ–µ–≥–æ –ü–æ–¥–æ–ø–µ—á–Ω–æ–≥–æ. –£–≤–∏–¥–∏—Ç –æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–µ –∏–º –∂–µ–ª–∞–Ω–∏–µ —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –æ—Ç –º–µ–Ω—è –æ –ø—Ä–∞–≤–∏–ª–∞—Ö, –≤—Ä–µ–º–µ–Ω–∏ –∏ –º–µ—Å—Ç–µ –æ–±–º–µ–Ω–∞ –ø–æ–¥–∞—Ä–∫–∞–º–∏.üìù\n\n–ï—Å–ª–∏ –≥–¥–µ-—Ç–æ –±—É–¥–µ—Ç –¥–æ–ø—É—â–µ–Ω–∞ –æ—à–∏–±–∫–∞, –±—É–¥—å —Ç–æ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –≥—Ä—É–ø–ø—ã –∏–ª–∏ –ø—Ä–∏ —É–∫–∞–∑–∞–Ω–∏–∏ –∏–º–µ–Ω–∏ –∏–ª–∏ –∂–µ–ª–∞–Ω–∏—è ‚Äî –≤—Å–µ –º–æ–∂–Ω–æ –ø–æ–ø—Ä–∞–≤–∏—Ç—å!‚úèÔ∏è –ö–∞–∂–¥–æ–º—É –°–∞–Ω—Ç–µ –¥–æ—Å—Ç—É–ø–µ–Ω –µ–≥–æ –∫–∞–±–∏–Ω–µ—Ç, –≥–¥–µ –∏–º—è –∏ –∂–µ–ª–∞–Ω–∏–µ –º–æ–∂–Ω–æ –ø–æ–º–µ–Ω—è—Ç—å. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ –º–æ–∂–µ—Ç –º–µ–Ω—è—Ç—å –µ—ë –≤–ª–∞–¥–µ–ª–µ—Ü.\n\n–í—Å–µ–º –°–∞–Ω—Ç–∞–º –¥–æ—Å—Ç—É–ø–µ–Ω –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç ‚Äî –ø–æ—Å–ª–µ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –ø—Ä–æ—Å—Ç–æ –ø–∏—à–∏—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–Ω–µ, –∞ —É–≤–∏–¥—è—Ç –µ–≥–æ –≤—Å–µ –≤ –≥—Ä—É–ø–ø–µ!üí¨\n\n–ñ–µ–ª–∞—é –≤—Å–µ–º —Ö–æ—Ä–æ—à–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ –≤—Ä–µ–º—è –∏ –ø–æ–≤–µ—Å–µ–ª–∏—Ç—å—Å—è!ü•≥üéâ")
	msg.ParseMode = "HTML"
	msg.ReplyMarkup = inlineKeyboard
	bot.Send(msg)
	fmt.Println(stringline)
}

func startJoin(bot *tg.BotAPI, update tg.Update, userID, groupID int64) {
	if members[userID].Group != 0 { // –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –≥—Ä—É–ø–ø–µ
		bot.Send(tg.NewMessage(userID, "–û–π, —Ç—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—à—å –≤ –≥—Ä—É–ø–ø–µ"))
		fmt.Println("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª —É–∂–µ –≤ –≥—Ä—É–ø–ø–µ, –Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞–ª –∑–∞–π—Ç–∏ –µ—â–µ —Ä–∞–∑")
		return
	} else if members[userID].Status == "joinName" || members[userID].Status == "joinLink" { // –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—Ö–æ–¥
		if members[userID].Status == "joinName" {
			bot.Send(tg.NewMessage(userID, "–û–π, —Ç—ã —É–∂–µ –≤—Å—Ç—É–ø–∞–µ—à—å –≤ –≥—Ä—É–ø–ø—É! –Ø –æ–∂–∏–¥–∞—é –≤–≤–æ–¥–∞ —Ç–≤–æ–µ–≥–æ –∏–º–µ–Ω–∏"))
			fmt.Println("–ü–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—Ö–æ–¥ –≤ –≥—Ä—É–ø–ø—É. –û–∂–∏–¥–∞–ª—Å—è –≤–≤–æ–¥ –∏–º–µ–Ω–∏")
		} else {
			bot.Send(tg.NewMessage(userID, "–û–π, —Ç—ã —É–∂–µ –≤—Å—Ç—É–ø–∞–µ—à—å –≤ –≥—Ä—É–ø–ø—É! –Ø –æ–∂–∏–¥–∞—é –≤–≤–æ–¥–∞ —Ç–≤–æ–µ–≥–æ –∂–µ–ª–∞–Ω–∏—è"))
			fmt.Println("–ü–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—Ö–æ–¥ –≤ –≥—Ä—É–ø–ø—É. –û–∂–∏–¥–∞–ª—Å—è –≤–≤–æ–¥ –∂–µ–ª–∞–Ω–∏—è")
		}
		return
	} else if _, ok := groups[groupID]; !ok { // –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ª–æ–º–∞–Ω–Ω—É—é —Å—Å—ã–ª–∫—É
		bot.Send(tg.NewMessage(userID, "–ì—Ä—É–ø–ø—ã, –≤ –∫–æ—Ç–æ—Ä—É—é –≤–µ–ª–∞ —ç—Ç–∞ —Å—Å—ã–ª–∫–∞, —É–∂–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.\n\n–°–ø—Ä–æ—Å–∏ –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É —É —á–µ–ª–æ–≤–µ–∫–∞, —á—Ç–æ –¥–∞–ª —Ç–µ–±–µ —ç—Ç—É.\n\n–ò–ª–∏ —Å–æ–∑–¥–∞–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é –≥—Ä—É–ø–ø—É!"))
		fmt.Println("–ù–µ–∞–∫—Ç—É–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞")
		return
	} else if groupID == 0 {
		bot.Send(tg.NewMessage(userID, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–µ—Ä–µ–ø—Ä–æ–π–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ"))
		fmt.Println("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç tempgroup –ø—Ä–∏ –≤—Ö–æ–¥–µ")
		return
	} else if !groups[members[userID].Group].DrawTime.IsZero() { // –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–æ—à–µ–¥—à–µ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
		bot.Send(tg.NewMessage(userID, "–û–π, –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ —É–∂–µ —Å–ª—É—á–∏–ª–æ—Å—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ. –í—Ö–æ–¥ –≤ –Ω–µ—ë –∑–∞–∫—Ä—ã—Ç"))
		fmt.Println("–ó–∞—Ö–æ–¥ –≤ –≥—Ä—É–ø–ø—É, –≥–¥–µ —É–∂–µ –ø—Ä–æ—à–ª–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ")
		return
	}

	// –µ—Å–ª–∏ –ø—Ä–æ–π–¥–µ–Ω—ã –ø—Ä–æ–≤–µ—Ä–∫–∏
	members[userID].Status = "joinName"
	protoname := update.CallbackQuery.From
	UserNick := protoname.UserName
	UserName := ""
	if protoname.FirstName != "" && protoname.LastName != "" {
		UserName = protoname.FirstName + " " + protoname.LastName
	} else {
		UserName = protoname.FirstName + protoname.LastName
	}
	var rows [][]tg.InlineKeyboardButton
	buttons := []tg.InlineKeyboardButton{}
	if UserNick != "" {
		buttons = []tg.InlineKeyboardButton{
			tg.NewInlineKeyboardButtonData(UserNick, "joinNick"),
		}
	}
	rows = append(rows, buttons)
	if UserName != "" {
		buttons = []tg.InlineKeyboardButton{
			tg.NewInlineKeyboardButtonData(UserName, "joinName"),
		}
	}
	rows = append(rows, buttons)
	inlineKeyboard := tg.NewInlineKeyboardMarkup(rows...)
	stringline := "–û—Ö–æ-—Ö–æ-—Ö–æ. –¢—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ—à—å—Å—è –∫ –≥—Ä—É–ø–ø–µ –∏–≥—Ä–æ–∫–æ–≤ –≤ –¢–∞–π–Ω–æ–≥–æ –°–∞–Ω—Ç—É ¬´<b>" + groups[members[userID].tempGroup].Name + "</b>¬ª!\n\n<b>–ù–∞–±–µ—Ä–∏ —Å–≤–æ–µ –∏–º—è –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –ø–æ –∫–Ω–æ–ø–∫–µ.</b>\n\n–ñ–µ–ª–∞—Ç–µ–ª—å–Ω–æ, —á—Ç–æ–±—ã –∏–º—è –±—ã–ª–æ –ø–æ–Ω—è—Ç–Ω—ã–º –¥–ª—è –ª—é–±–æ–≥–æ –°–∞–Ω—Ç—ã!\n\n–ï—Å–ª–∏ –≤ –≥—Ä—É–ø–ø–µ –µ—Å—Ç—å –ª—é–¥–∏ —Å —Ç–∞–∫–∏–º –∂–µ –∏–º–µ–Ω–µ–º, –¥–æ–±–∞–≤—å —Å–≤–æ—é —Ñ–∞–º–∏–ª–∏—é. –ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –Ω–∏–∫–Ω–µ–π–º, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –ª—É—á—à–µ —É–∫–∞–∂–∏ —Å–≤–æ—ë –Ω–∞—Å—Ç–æ—è—â–µ–µ –∏–º—è."
	image := tg.NewPhoto(userID, tg.FilePath("./start4.png"))
	image.Caption = stringline
	image.ParseMode = "HTML"
	image.ReplyMarkup = inlineKeyboard
	bot.Send(image)
	fmt.Println("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–¥–æ–ª–∂–∏–ª –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ. –¢–µ–ø–µ—Ä—å –æ–∂–∏–¥–∞–µ—Ç—Å—è –≤–≤–æ–¥ –Ω–∏–∫–∞ –∏–ª–∏ –≤—ã–±–æ—Ä –¥–æ—Å—Ç—É–ø–Ω–æ–π –∫–Ω–æ–ø–∫–∏")
}

func groupManagement(bot *tg.BotAPI, userID int64) {
	if groups[members[userID].Group].ID == 0 { // –∞ –≤–¥—Ä—É–≥ –Ω–∞–∂–∞–ª –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã
		bot.Send(tg.NewMessage(userID, "–£ —Ç–µ–±—è –Ω–µ—Ç –≥—Ä—É–ø–ø—ã"))
		fmt.Println("–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–∫—Ä—ã—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–æ–π, –±—É–¥—É—á–∏ –±–µ–∑ –≥—Ä—É–ø–ø—ã")
		return
	} else if groups[members[userID].Group].leaderID != userID { // –∞ –≤–¥—Ä—É–≥ –≤ –≥—Ä—É–ø–ø–µ, –Ω–æ –Ω–µ –ª–∏–¥–µ—Ä, –∞ –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É
		bot.Send(tg.NewMessage(userID, "–¢—ã –Ω–µ –ª–∏–¥–µ—Ä –≥—Ä—É–ø–ø—ã"))
		fmt.Println("–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–∫—Ä—ã—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–æ–π –Ω–µ –±—É–¥—É—á–∏ –ª–∏–¥–µ—Ä–æ–º")
		return
	}

	if !groups[members[userID].Group].DrawTime.IsZero() { // –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
		buttons := []tg.InlineKeyboardButton{
			tg.NewInlineKeyboardButtonData("–£–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—ÉüóëÔ∏è", "aDelGroup"),
		}
		var rows [][]tg.InlineKeyboardButton
		for _, btn := range buttons {
			row := []tg.InlineKeyboardButton{btn}
			rows = append(rows, row)
		}
		inlineKeyboard := tg.NewInlineKeyboardMarkup(rows...)
		msg := tg.NewMessage(userID, "–ö–æ–≥–¥–∞ –ø–æ—Å—á–∏—Ç–∞–µ—à—å –Ω—É–∂–Ω—ã–º. –ò–ª–∏ –¥–æ–∂–¥–∏—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —á–∏—Å—Ç–∫–∏ –≥—Ä—É–ø–ø—ã ‚Äî –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω–æ –º–µ—Å—è—Ü —Å –º–æ–º–µ–Ω—Ç–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è.")
		msg.ReplyMarkup = inlineKeyboard
		bot.Send(msg)
		fmt.Println("–û—Ç–∫—Ä—ã—Ç–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–æ–π. –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ+")
		return
	}

	buttons := []tg.InlineKeyboardButton{ // —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –º–µ–Ω—é
		tg.NewInlineKeyboardButtonData("–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µüé≤", "aDraw"),
		tg.NewInlineKeyboardButtonData("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≥—Ä—É–ø–ø—É‚úèÔ∏è", "aChangeInfo"),
		tg.NewInlineKeyboardButtonData("–ü–æ–≤—Ç–æ—Ä–∏—Ç—å —Å—Å—ã–ª–∫—ÉüîÑ", "repeatLink"),
		tg.NewInlineKeyboardButtonData("–ò—Å–∫–ª—é—á–∏—Ç—å –∏–∑ –≥—Ä—É–ø–ø—ã‚ùå", "aExclude"),
		tg.NewInlineKeyboardButtonData("–ü–æ–º–µ–Ω—è—Ç—å —Å—Å—ã–ª–∫—Éüîó", "aDelLink"),
		tg.NewInlineKeyboardButtonData("–£–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—ÉüóëÔ∏è", "aDelGroup"),
	}
	var rows [][]tg.InlineKeyboardButton
	for _, btn := range buttons {
		row := []tg.InlineKeyboardButton{btn}
		rows = append(rows, row)
	}
	inlineKeyboard := tg.NewInlineKeyboardMarkup(rows...)
	msg := tg.NewMessage(userID, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:     üîç")
	msg.ReplyMarkup = inlineKeyboard
	bot.Send(msg)
	fmt.Println("–û—Ç–∫—Ä—ã—Ç–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–æ–π")
}

func openProfile(bot *tg.BotAPI, userID int64) {
	if members[userID].Group == 0 && members[userID].DrawID == 0 { // –∞ –≤–¥—Ä—É–≥ –Ω–∞–∂–∞–ª –ø–æ—Å–ª–µ –≤—ã—Ö–æ–¥–∞ –∏–∑ –≥—Ä—É–ø–ø—ã
		bot.Send(tg.NewMessage(userID, "–£ —Ç–µ–±—è –Ω–µ—Ç –≥—Ä—É–ø–ø—ã"))
		fmt.Println("–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–∫—Ä—ã—Ç—å –∫–∞–±–∏–Ω–µ—Ç –±–µ–∑ –≥—Ä—É–ø–ø—ã")
		return
	} else if members[userID].Group == 0 && members[userID].DrawID != 0 {
		buttons := []tg.InlineKeyboardButton{
			tg.NewInlineKeyboardButtonData("–ú–æ—ë –∂–µ–ª–∞–Ω–∏–µüéÅ", "aShowLink"),
			tg.NewInlineKeyboardButtonData("–ú–æ–π –ü–æ–¥–æ–ø–µ—á–Ω—ã–πüéÖ", "ImSanta"),
		}
		var rows [][]tg.InlineKeyboardButton
		for _, btn := range buttons {
			row := []tg.InlineKeyboardButton{btn}
			rows = append(rows, row)
		}
		inlineKeyboard := tg.NewInlineKeyboardMarkup(rows...)
		msg := tg.NewMessage(userID, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:     üîç")
		msg.ReplyMarkup = inlineKeyboard
		bot.Send(msg)
		fmt.Println("–û—Ç–∫—Ä—ã—Ç –ö–∞–±–∏–Ω–µ—Ç –°–∞–Ω—Ç—ã –ø–æ—Å–ª–µ –≤—ã—Ö–æ–¥–∞ –∏–∑ –≥—Ä—É–ø–ø—ã —Å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º")
		return
	}

	if groups[members[userID].Group].leaderID != userID { // —É—á–∞—Å—Ç–Ω–∏–∫
		if !groups[members[userID].Group].DrawTime.IsZero() { // –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
			buttons := []tg.InlineKeyboardButton{
				tg.NewInlineKeyboardButtonData("–ú–æ—ë –∂–µ–ª–∞–Ω–∏–µüéÅ", "aShowLink"),
				tg.NewInlineKeyboardButtonData("–ú–æ–π –ü–æ–¥–æ–ø–µ—á–Ω—ã–πüéÖ", "ImSanta"),
				tg.NewInlineKeyboardButtonData("–ü–æ–∫–∏–Ω—É—Ç—å –≥—Ä—É–ø–ø—Éüëã", "aLeaveGroup"),
			}
			var rows [][]tg.InlineKeyboardButton
			for _, btn := range buttons {
				row := []tg.InlineKeyboardButton{btn}
				rows = append(rows, row)
			}
			inlineKeyboard := tg.NewInlineKeyboardMarkup(rows...)
			msg := tg.NewMessage(userID, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:     üîç")
			msg.ReplyMarkup = inlineKeyboard
			bot.Send(msg)
			fmt.Println("–û—Ç–∫—Ä—ã—Ç –ö–∞–±–∏–Ω–µ—Ç –°–∞–Ω—Ç—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–º. –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ+")
			return
		}

		buttons := []tg.InlineKeyboardButton{ // —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –º–µ–Ω—é
			tg.NewInlineKeyboardButtonData("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–ø–ø–µ‚ÑπÔ∏è", "groupInfo"),
			tg.NewInlineKeyboardButtonData("–°–º–µ–Ω–∏—Ç—å –∏–º—è‚úèÔ∏è", "aChangeName"),
			tg.NewInlineKeyboardButtonData("–ú–æ—ë –∂–µ–ª–∞–Ω–∏–µüéÅ", "aShowLink"),
			tg.NewInlineKeyboardButtonData("–ü–æ–∫–∏–Ω—É—Ç—å –≥—Ä—É–ø–ø—Éüëã", "aLeaveGroup"),
		}
		var rows [][]tg.InlineKeyboardButton
		for _, btn := range buttons {
			row := []tg.InlineKeyboardButton{btn}
			rows = append(rows, row)
		}
		inlineKeyboard := tg.NewInlineKeyboardMarkup(rows...)
		msg := tg.NewMessage(userID, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:     üîç")
		msg.ReplyMarkup = inlineKeyboard
		bot.Send(msg)
		fmt.Println("–û—Ç–∫—Ä—ã—Ç –ö–∞–±–∏–Ω–µ—Ç –°–∞–Ω—Ç—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–º")
	} else { // –ª–∏–¥–µ—Ä
		if !groups[members[userID].Group].DrawTime.IsZero() { // –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
			buttons := []tg.InlineKeyboardButton{
				tg.NewInlineKeyboardButtonData("–ú–æ—ë –∂–µ–ª–∞–Ω–∏–µüéÅ", "aShowLink"),
				tg.NewInlineKeyboardButtonData("–ú–æ–π –ü–æ–¥–æ–ø–µ—á–Ω—ã–πüéÖ", "ImSanta"),
			}
			var rows [][]tg.InlineKeyboardButton
			for _, btn := range buttons {
				row := []tg.InlineKeyboardButton{btn}
				rows = append(rows, row)
			}
			inlineKeyboard := tg.NewInlineKeyboardMarkup(rows...)
			msg := tg.NewMessage(userID, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:     üîç")
			msg.ReplyMarkup = inlineKeyboard
			bot.Send(msg)
			fmt.Println("–û—Ç–∫—Ä—ã—Ç –ö–∞–±–∏–Ω–µ—Ç –°–∞–Ω—Ç—ã –ª–∏–¥–µ—Ä–æ–º. –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ+")
			return
		}

		buttons := []tg.InlineKeyboardButton{ // —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –º–µ–Ω—é
			tg.NewInlineKeyboardButtonData("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–ø–ø–µ‚ÑπÔ∏è", "groupInfo"),
			tg.NewInlineKeyboardButtonData("–°–º–µ–Ω–∏—Ç—å –∏–º—è‚úèÔ∏è", "aChangeName"),
			tg.NewInlineKeyboardButtonData("–ú–æ—ë –∂–µ–ª–∞–Ω–∏–µüéÅ", "aShowLink"),
		}
		var rows [][]tg.InlineKeyboardButton
		for _, btn := range buttons {
			row := []tg.InlineKeyboardButton{btn}
			rows = append(rows, row)
		}
		inlineKeyboard := tg.NewInlineKeyboardMarkup(rows...)
		msg := tg.NewMessage(userID, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:     üîç")
		msg.ReplyMarkup = inlineKeyboard
		bot.Send(msg)
		fmt.Println("–û—Ç–∫—Ä—ã—Ç –ö–∞–±–∏–Ω–µ—Ç –°–∞–Ω—Ç—ã –ª–∏–¥–µ—Ä–æ–º.")
	}
}

func groupInfo(bot *tg.BotAPI, userID int64) {
	g := groups[members[userID].Group]
	if g.ID == 0 { // –∞ –≤–¥—Ä—É–≥ –Ω–µ –≤ –≥—Ä—É–ø–ø–µ...
		bot.Send(tg.NewMessage(userID, "–£ —Ç–µ–±—è –Ω–µ—Ç –≥—Ä—É–ø–ø—ã"))
		fmt.Println("–ü–æ–ø—ã—Ç–∫–∞ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –±–µ–∑ –≥—Ä—É–ø–ø—ã")
		return
	}

	stringline := "<b>¬´" + g.Name + "¬ª</b>\n\n<b>–ü—Ä–∞–≤–∏–ª–∞ –≥—Ä—É–ø–ø—ã:</b>\n" + g.Description + "\n\n<b>–í—Ä–µ–º—è –∏ –º–µ—Å—Ç–æ –æ–±–º–µ–Ω–∞ –ø–æ–¥–∞—Ä–∫–∞–º–∏:</b>\n" + g.TimePlace + "<b>\n\n–°–ø–∏—Å–æ–∫ –°–∞–Ω—Ç:</b>\n" + MembersList(g.Members)
	msg := tg.NewMessage(userID, stringline)
	msg.ParseMode = "HTML"
	bot.Send(msg)
}

func changeInfo(bot *tg.BotAPI, userID int64, querydata string) {
	g := groups[members[userID].Group]
	if g.ID == 0 { // –æ—Ç—Å–µ–∫–∞–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –≥—Ä—É–ø–ø—ã
		bot.Send(tg.NewMessage(userID, "–£ —Ç–µ–±—è –Ω–µ—Ç –≥—Ä—É–ø–ø—ã"))
		fmt.Println("–ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≥—Ä—É–ø–ø—É –±–µ–∑ –≥—Ä—É–ø–ø—ã")
		return
	} else if g.leaderID != userID { // –æ—Ç—Å–µ–∫–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç, —á—Ç–æ –∫–Ω–æ–ø–∫—É –∫–∞–∫–∏–º-—Ç–æ –æ–±—Ä–∞–∑–æ–º –Ω–∞–∂–∞–ª –Ω–µ –ª–∏–¥–µ—Ä –≥—Ä—É–ø–ø—ã
		bot.Send(tg.NewMessage(userID, "–¢—ã –Ω–µ –≤–ª–∞–¥–µ–µ—à—å –≥—Ä—É–ø–ø–æ–π"))
		fmt.Println("–ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≥—Ä—É–ø–ø—É, –Ω–µ –±—É–¥—É—á–∏ –µ—ë –ª–∏–¥–µ—Ä–æ–º")
		return
	} else if !g.DrawTime.IsZero() { // –æ—Ç—Å–µ–∫–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
		bot.Send(tg.NewMessage(userID, "–í –≥—Ä—É–ø–ø–µ —É–∂–µ –ø—Ä–æ—à–ª–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ"))
		fmt.Println("–ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≥—Ä—É–ø–ø—É –ø–æ—Å–ª–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è")
		return
	}

	if querydata == "aChangeInfo" {
		buttons := []tg.InlineKeyboardButton{
			tg.NewInlineKeyboardButtonData("–ù–∞–∑–≤–∞–Ω–∏–µüè∑Ô∏è", "nameChangeInfo"),
			tg.NewInlineKeyboardButtonData("–ü—Ä–∞–≤–∏–ª–∞üìú", "rulesChangeInfo"),
			tg.NewInlineKeyboardButtonData("–í—Ä–µ–º—è –∏ –º–µ—Å—Ç–æüìÜ", "timeplaceChangeInfo"),
		}
		var rows [][]tg.InlineKeyboardButton
		for _, btn := range buttons {
			row := []tg.InlineKeyboardButton{btn}
			rows = append(rows, row)
		}
		inlineKeyboard := tg.NewInlineKeyboardMarkup(rows...)
		msg := tg.NewMessage(userID, "–í—ã–±–µ—Ä–∏ —á—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å:")
		msg.ReplyMarkup = inlineKeyboard
		bot.Send(msg)
		fmt.Println("–°–ø—Ä–∞—à–∏–≤–∞–µ—Ç—Å—è —á—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ –≥—Ä—É–ø–ø–µ")
	} else if querydata == "nameChangeInfo" {
		button := tg.NewInlineKeyboardButtonData("–û—Ç–º–µ–Ω–∏—Ç—å", "cancelChangeInfo")
		row := tg.NewInlineKeyboardRow(button)
		inlineKeyboard := tg.NewInlineKeyboardMarkup(row)
		members[userID].Status = "nameChangeInfo"
		msg := tg.NewMessage(userID, "–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã. –ü—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è –æ—Ç 2 –¥–æ 60 —Å–∏–º–≤–æ–ª–æ–≤.\n\n–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–æ—Å—å, –∂–º–∏ ¬´–û—Ç–º–µ–Ω–∏—Ç—å¬ª!")
		msg.ReplyMarkup = inlineKeyboard
		bot.Send(msg)
		fmt.Println("–í—ã–±—Ä–∞–ª —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã")
	} else if querydata == "rulesChangeInfo" {
		button := tg.NewInlineKeyboardButtonData("–û—Ç–º–µ–Ω–∏—Ç—å", "cancelChangeInfo")
		row := tg.NewInlineKeyboardRow(button)
		inlineKeyboard := tg.NewInlineKeyboardMarkup(row)
		members[userID].Status = "rulesChangeInfo"
		msg := tg.NewMessage(userID, "–í–≤–µ–¥–∏ –Ω–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –≥—Ä—É–ø–ø—ã. –ü—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è –¥–æ 2500 —Å–∏–º–≤–æ–ª–æ–≤.\n\n–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–æ—Å—å, –∂–º–∏ ¬´–û—Ç–º–µ–Ω–∏—Ç—å¬ª!")
		msg.ReplyMarkup = inlineKeyboard
		bot.Send(msg)
		fmt.Println("–í—ã–±—Ä–∞–ª —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –≥—Ä—É–ø–ø—ã")
	} else if querydata == "timeplaceChangeInfo" {
		button := tg.NewInlineKeyboardButtonData("–û—Ç–º–µ–Ω–∏—Ç—å", "cancelChangeInfo")
		row := tg.NewInlineKeyboardRow(button)
		inlineKeyboard := tg.NewInlineKeyboardMarkup(row)
		members[userID].Status = "timeplaceChangeInfo"
		msg := tg.NewMessage(userID, "–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –∏ –º–µ—Å—Ç–æ –æ–±–º–µ–Ω–∞ –ø–æ–¥–∞—Ä–∫–∞–º–∏. –ü—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è –¥–æ 255 —Å–∏–º–≤–æ–ª–æ–≤.\n\n–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–æ—Å—å, –∂–º–∏ ¬´–û—Ç–º–µ–Ω–∏—Ç—å¬ª!")
		msg.ReplyMarkup = inlineKeyboard
		bot.Send(msg)
		fmt.Println("–í—ã–±—Ä–∞–ª —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è –∏ –º–µ—Å—Ç–æ –≥—Ä—É–ø–ø—ã")
	} else { // –æ—Ç–º–µ–Ω–∞
		if members[userID].Status == "quo" {
			bot.Send(tg.NewMessage(userID, "–£–∂–µ –±—ã–ª–æ –æ—Ç–º–µ–Ω–µ–Ω–æ‚ú®"))
			fmt.Println("–í–Ω–æ–≤—å –æ—Ç–º–µ–Ω–µ–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã")
			return
		}
		members[userID].Status = "quo"
		bot.Send(tg.NewMessage(userID, "–û—Ç–º–µ–Ω–µ–Ω–æ‚ú®"))
		fmt.Println("–û—Ç–º–µ–Ω–µ–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã")
	}
}

func draw(bot *tg.BotAPI, userID int64, querydata string, db *sql.DB) {
	g := groups[members[userID].Group]
	if g.ID == 0 { // –æ—Ç—Å–µ–∫–∞–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –≥—Ä—É–ø–ø—ã
		bot.Send(tg.NewMessage(userID, "–£ —Ç–µ–±—è –Ω–µ—Ç –≥—Ä—É–ø–ø—ã"))
		fmt.Println("–ù–∞–∂–∞–ª –∂–µ—Ä–µ–±—å–µ–≤–∫—É, –∞ –≥—Ä—É–ø–ø—ã —Ç–æ –Ω–µ—Ç")
		return
	} else if !g.DrawTime.IsZero() { // –æ—Ç—Å–µ–∫–∞–µ–º –ø—Ä–æ—à–µ–¥—à—É—é –∂–µ—Ä–µ–±—å–µ–≤–∫—É
		bot.Send(tg.NewMessage(userID, "–í –≥—Ä—É–ø–ø–µ —É–∂–µ –ø—Ä–æ—à–ª–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ!"))
		fmt.Println("–ñ–µ—Ä–µ–±—å–µ–≤–∫–∞ —É–∂–µ –ø—Ä–æ—à–ª–∞, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–ª–∏–∫–Ω—É–ª –µ—â–µ —Ä–∞–∑ –Ω–∞ –Ω–µ—ë")
		return
	} else if len(g.Members) < 3 { // –æ—Ç—Å–µ–∫–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
		bot.Send(tg.NewMessage(userID, "–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –°–∞–Ω—Ç –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è ‚Äî —Ç—Ä–∏."))
		fmt.Println("–ù–∞–∂–∞–ª –∂–µ—Ä–µ–±—å–µ–≤–∫—É, –∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ")
		return
	} else if g.leaderID != userID { // –æ—Ç—Å–µ–∫–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –Ω–µ –ª–∏–¥–µ—Ä–æ–º
		bot.Send(tg.NewMessage(userID, "–¢—ã –Ω–µ –ª–∏–¥–µ—Ä –≥—Ä—É–ø–ø—ã"))
		fmt.Println("–ù–∞–∂–∞–ª –∂–µ—Ä–µ–±—å–µ–≤–∫—É, –∞ —Å–∞–º –Ω–µ –ª–∏–¥–µ—Ä –∂–µ!")
		return
	}

	if querydata == "aDraw" { // –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
		button := []tg.InlineKeyboardButton{tg.NewInlineKeyboardButtonData("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "yesDraw")}
		inlineKeyboard := tg.InlineKeyboardMarkup{InlineKeyboard: [][]tg.InlineKeyboardButton{button}}
		msg := tg.NewMessage(userID, "–í–∞—É, —É–∂–µ —Ö–æ—á–µ—à—å –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—é? –ö–ª–∞—Å—Å! –¢–æ–ª—å–∫–æ –±—É–¥—å –≤–Ω–∏–º–∞—Ç–µ–ª–µ–Ωüîç‚ùó, –∫–æ–≥–¥–∞ –ø—Ä–æ–π–¥–µ—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ, –µ–≥–æ —É–∂–µ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è –æ—Ç–º–µ–Ω–∏—Ç—å. –î–µ–π—Å—Ç–≤–∏—è –≤ ¬´–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–æ–π¬ª, ¬´–ö–∞–±–∏–Ω–µ—Ç–µ –°–∞–Ω—Ç—ã¬ª –±—É–¥—É—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã, –∞ –≤—Ö–æ–¥ –Ω–æ–≤—ã–º –°–∞–Ω—Ç–∞–º –≤–æ—Å–ø—Ä–µ—â—ë–Ωüõë, –ø–æ—ç—Ç–æ–º—É –ª—É—á—à–µ —Å–Ω–∞—á–∞–ª–∞ —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –≥—Ä—É–ø–ø–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≥–æ—Ç–æ–≤–∞!‚ö†Ô∏è\n\n–ï—Å–ª–∏ –Ω–µ —Å–æ–º–Ω–µ–≤–∞–µ—à—å—Å—è –≤ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏, –∂–º–∏ ¬´–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å¬ª –∏ –ø–æ–¥–æ–∂–¥–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥!‚úÖ –ö–∞–∂–¥—ã–π —Å–∞–Ω—Ç–∞ –ø–æ–ª—É—á–∏—Ç —Å–≤–æ—é –ø–æ—Ä—Ü–∏—é —Ç–∞–π–Ω—ã –∏ –ø–æ–¥–∞—Ä–∫–æ–≤!üéÅüéâ\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∏—á–µ–≥–æ –¥–µ–ª–∞—Ç—å –Ω–µ –Ω—É–∂–Ω–æ, —Ç–æ–ª—å–∫–æ –ø–æ—Å—Ç–∞—Ä–∞–π—Å—è –Ω–µ –∑–∞–¥–µ—Ç—å –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.üòú")
		msg.ParseMode = "HTML"
		msg.ReplyMarkup = inlineKeyboard
		bot.Send(msg)
	} else if querydata == "yesDraw" { // –≤—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
		g.DrawTime = time.Now() // —Ñ–∏–∫—Å–∏—Ä—É–µ–º –≤—Ä–µ–º—è —Å–µ–≥–æ —Å–æ–±—ã—Ç–∏—è

		membersList := make([]*Member, 0, len(g.Members)) // —Å–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–µ–º–±–µ—Ä–æ–≤
		for _, member := range g.Members {
			membersList = append(membersList, members[member])
		}

		rand.Seed(uint64(time.Now().UnixNano()))        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª
		rand.Shuffle(len(membersList), func(i, j int) { // –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º
			membersList[i], membersList[j] = membersList[j], membersList[i]
		})

		for number := range membersList { // —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º
			ownID := membersList[number].ID
			var ward int64
			if number == len(membersList)-1 { // –ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
				members[ownID].Ward = membersList[0].Link
				members[ownID].WardID = membersList[0].ID
				ward = membersList[0].ID
				members[ward].DrawID = ownID
			} else { // –≤—Å–µ —à–∞–≥–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è, –∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ
				members[ownID].Ward = membersList[number+1].Link
				members[ownID].WardID = membersList[number+1].ID
				ward = membersList[number+1].ID
				members[ward].DrawID = ownID
			}

			image := tg.NewPhoto(ownID, tg.FilePath("./start3.png"))
			stringline := "–ñ—Ä–µ–±–∏–π –±—Ä–æ—à–µ–Ω! –¢–∞–π–Ω—ã–µ —Å—é—Ä–ø—Ä–∏–∑—ã –∏ –∫–æ–≤–∞—Ä–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∏ –∂–¥—É—Ç! –î–∞ –≤–æ—Ü–∞—Ä–∏—Ç—Å—è –Ω–æ–≤–æ–≥–æ–¥–Ω—è—è —Å–∫–∞–∑–∫–∞ –∏ –ø—É—Å—Ç—å –∂–µ–ª–∞–Ω–∏—è –∫–∞–∂–¥–æ–≥–æ —Å–±—É–¥—É—Ç—Å—è!\n\n–¢–µ–ø–µ—Ä—å —Ç—ã –¢–∞–π–Ω—ã–π –°–∞–Ω—Ç–∞ –¥–ª—è <b>" + members[ward].Name + "!</b>"
			image.Caption = stringline
			image.ParseMode = "HTML"
			bot.Send(image)                // —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π
			if members[ownID].Ward != "" { // –µ—Å–ª–∏ –±—ã–ª–æ –∂–µ–ª–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ
				stringline := "–¢–≤–æ–π –ü–æ–¥–æ–ø–µ—á–Ω—ã–π <b>" + members[ward].Name + "</b> –æ—Å—Ç–∞–≤–∏–ª —Å–≤–æ—ë –∂–µ–ª–∞–Ω–∏–µ!\n\nüéÑ-üéÅ-üéá-üéâ-üéÖ-üéÑ-‚ùÑÔ∏è-üéÖ-üéÜ-‚õÑ-üå®Ô∏è-ü¶å\n\n<b>" + members[ownID].Ward + "</b>\n\nüéÑ-üéÅ-üéá-üéâ-üéÖ-üéÑ-‚ùÑÔ∏è-üéÖ-üéÜ-‚õÑ-üå®Ô∏è-ü¶å\n\n–ù–∞–ø–æ–º–∏–Ω–∞—é, –ø—Ä–∞–≤–∏–ª–∞ –≥—Ä—É–ø–ø—ã:\n" + groups[members[ownID].Group].Description + "\n\n–í—Ä–µ–º—è –∏ –º–µ—Å—Ç–æ –æ–±–º–∞–Ω–∞ –ø–æ–¥–∞—Ä–∫–∞–º–∏:\n" + groups[members[ownID].Group].TimePlace + "."
				msg := tg.NewMessage(ownID, stringline)
				msg.ParseMode = "HTML"
				bot.Send(msg)
			} else { // –µ—Å–ª–∏ –Ω–µ –±—ã–ª–æ –∂–µ–ª–∞–Ω–∏—è
				stringline := "–¢–≤–æ–π –ü–æ–¥–æ–ø–µ—á–Ω—ã–π <b>" + members[ward].Name + "</b> —Ö–æ—á–µ—Ç —Å—é—Ä–ø—Ä–∏–∑–∞, –ø–æ—Å—Ç–∞—Ä–∞–π—Å—è –≤—ã–±—Ä–∞—Ç—å –ø–æ–¥–∞—Ä–æ–∫, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å–µ–Ω –∏ –ø—Ä–∏—è—Ç–µ–Ω —Ç–≤–æ–µ–º—É –ü–æ–¥–æ–ø–µ—á–Ω–æ–º—É.\nüéÑ-üéÅ-üéá-üéâ-üéÖ-üéÑ-‚ùÑÔ∏è-üéÖ-üéÜ-‚õÑ-üå®Ô∏è-ü¶å\n\n–ù–∞–ø–æ–º–∏–Ω–∞—é, –ø—Ä–∞–≤–∏–ª–∞ –≥—Ä—É–ø–ø—ã:\n" + groups[members[ownID].Group].Description + "\n\n–í—Ä–µ–º—è –∏ –º–µ—Å—Ç–æ –æ–±–º–∞–Ω–∞ –ø–æ–¥–∞—Ä–∫–∞–º–∏:\n" + groups[members[ownID].Group].TimePlace + "."
				msg := tg.NewMessage(ownID, stringline)
				msg.ParseMode = "HTML"
				bot.Send(msg)
			}

			msg := tg.NewMessage(ownID, "–£—Ä–∞! –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å –±–ª–µ—Å–∫–æ–º! –ú–æ—è —Ä–∞–±–æ—Ç–∞ –ø–æ–¥–æ—à–ª–∞ –∫ –∫–æ–Ω—Ü—É, –∏ —Ç–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ–±—Å—É–¥–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –Ω–µ —Ä–∞—Å–∫—Ä—ã–≤–∞—è —Å–≤–æ–∏—Ö –ü–æ–¥–æ–ø–µ—á–Ω—ã—Ö. –ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –º–æ–º–µ–Ω—Ç–æ–º, –±—É–¥—å—Ç–µ —Å—á–∞—Å—Ç–ª–∏–≤—ã, —Ö–æ—Ä–æ—à–∏—Ö –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤!üéàü•≥\n\nP.S. –ï—Å–ª–∏ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å, –∫–∞–∫ –≤—Å—ë –ø—Ä–æ—à–ª–æ, –ø–æ –∫–Ω–æ–ø–∫–µ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –ø–æ–¥–∞—Ä–æ–∫ –º–æ–µ–º—É —Å–æ–∑–¥–∞—Ç–µ–ª—é.")
			button := tg.NewInlineKeyboardButtonData("–ü–æ–¥–∞—Ä–æ–∫ —Å–æ–∑–¥–∞—Ç–µ–ª—é –±–æ—Ç–∞", "donut") // –∫–ª—è–Ω—á–∏–º –¥–µ–Ω—å–≥–∏
			row := tg.NewInlineKeyboardRow(button)
			inlineKeyboard := tg.NewInlineKeyboardMarkup(row)
			msg.ReplyMarkup = inlineKeyboard
			bot.Send(msg)
			fmt.Println("–¢–∞–π–Ω—ã–π –°–∞–Ω—Ç–∞:", members[ownID].Name, ownID, "-> | –ü–æ–¥–æ–ø–µ—á–Ω—ã–π:", members[ward].Name, ward)
		}
		for number, id := range g.Members {
			m := members[id]
			if number == len(membersList)-1 { // –ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
				_, err := db.Exec("UPDATE users SET ward = ?, wardid = ? WHERE id = ?", m.Ward, m.WardID, m.ID)
				if err != nil {
					fmt.Println("–û—à–∏–±–∫–∞ –∑–∞–Ω–µ—Å–µ–Ω–∏—è –≤ –ë–î draw-–∏–Ω—Ñ—ã(wards[0])", m.Ward, m.WardID, m.ID, err)
				}
				_, err = db.Exec("UPDATE users SET drawid = ? WHERE id = ?", m.DrawID, m.ID)
				if err != nil {
					fmt.Println("–û—à–∏–±–∫–∞ –∑–∞–Ω–µ—Å–µ–Ω–∏—è –≤ –ë–î draw-–∏–Ω—Ñ—ã(drawid[0]). DrawID/whereID:", m.DrawID, m.ID, err)
				}
			} else { // –≤—Å–µ —à–∞–≥–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è, –∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ
				_, err := db.Exec("UPDATE users SET ward = ?, wardid = ? WHERE id = ?", m.Ward, m.WardID, m.ID)
				if err != nil {
					fmt.Println("–û—à–∏–±–∫–∞ –∑–∞–Ω–µ—Å–µ–Ω–∏—è –≤ –ë–î draw-–∏–Ω—Ñ—ã(wards)", m.Ward, m.WardID, m.ID, err)
				}
				_, err = db.Exec("UPDATE users SET drawid = ? WHERE id = ?", m.DrawID, m.ID)
				if err != nil {
					fmt.Println("–û—à–∏–±–∫–∞ –∑–∞–Ω–µ—Å–µ–Ω–∏—è –≤ –ë–î draw-–∏–Ω—Ñ—ã(drawid). DrawID/whereID:", m.DrawID, m.ID, err)
				}
			}
		}
		_, err := db.Exec("UPDATE groups SET drawdt = ? WHERE id = ?", g.DrawTime, g.ID)
		if err != nil {
			fmt.Println("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ—ã drawdt –≤ –ë–î –ø–æ—Å–ª–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è. –í—Ä–µ–º—è/groupID:", g.DrawTime, g.ID, err)
		}
		_, err = db.Exec("UPDATE groups SET draw = ? WHERE id = ?", "YES", g.ID)
		if err != nil {
			fmt.Println("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ—ã draw=yes –≤ –ë–î –ø–æ—Å–ª–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è. groupID:", g.ID, err)
		}
		fmt.Println("–ñ–µ—Ä–µ–±—å–µ–≤–∫–∞ –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–∞")
	}
}

func repeatLink(bot *tg.BotAPI, userID int64) {
	g := groups[members[userID].Group]
	if g.ID == 0 { // –æ—Ç—Å–µ–∫–∞–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –≥—Ä—É–ø–ø—ã
		bot.Send(tg.NewMessage(userID, "–£ —Ç–µ–±—è –Ω–µ—Ç –≥—Ä—É–ø–ø—ã"))
		fmt.Println("–ü–æ–≤—Ç–æ—Ä–∏–ª —Å—Å—ã–ª–∫—É, –∞ –≥—Ä—É–ø–ø—ã —Ç–æ –Ω–µ—Ç")
		return
	} else if !g.DrawTime.IsZero() { // –æ—Ç—Å–µ–∫–∞–µ–º –ø—Ä–æ—à–µ–¥—à–µ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
		bot.Send(tg.NewMessage(userID, "–í –≥—Ä—É–ø–ø–µ —É–∂–µ –ø—Ä–æ—à–ª–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ!"))
		fmt.Println("–ø–æ–≤—Ç–æ—Ä–∏–ª —Å—Å—ã–ª–∫—É, –∞ –∂–µ—Ä–µ–±—å–µ–≤–∫–∞ –∂–µ –ø—Ä–æ—à–ª–∞")
		return
	} else if g.leaderID != userID { // –∞ –≤–¥—Ä—É–≥ –Ω–µ –ª–∏–¥–µ—Ä –Ω–∞–∂–∞–ª
		bot.Send(tg.NewMessage(userID, "–¢—ã –Ω–µ –ª–∏–¥–µ—Ä –≥—Ä—É–ø–ø—ã"))
		fmt.Println("–ù–∞–∂–∞–ª –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —Å—Å—ã–ª–∫—É, –∞ —Å–∞–º –Ω–µ –ª–∏–¥–µ—Ä –∂–µ!")
		return
	}

	bot.Send(tg.NewMessage(userID, fmt.Sprintf("–ì—Ä—É–ø–ø–∞ –¢–∞–π–Ω—ã—Ö –°–∞–Ω—Ç ¬´%s¬ª\nt.me/%s?start=%d", groups[members[userID].Group].Name, bot.Self.UserName, members[userID].Group)))
}

func delLink(bot *tg.BotAPI, userID int64, querydata string, db *sql.DB) {
	g := groups[members[userID].Group]
	if g.ID == 0 { // –æ—Ç—Å–µ–∫–∞–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –≥—Ä—É–ø–ø—ã
		bot.Send(tg.NewMessage(userID, "–£ —Ç–µ–±—è –Ω–µ—Ç –≥—Ä—É–ø–ø—ã"))
		fmt.Println("–ù–∞–∂–∞–ª –ø–æ–º–µ–Ω—è—Ç—å —Å—Å—ã–ª–∫—É, –∞ –≥—Ä—É–ø–ø—ã —Ç–æ –Ω–µ—Ç")
		return
	} else if !g.DrawTime.IsZero() { // –æ—Ç—Å–µ–∫–∞–µ–º –ø—Ä–æ—à–µ–¥—à—É—é –∂–µ—Ä–µ–±—å–µ–≤–∫—É
		bot.Send(tg.NewMessage(userID, "–í –≥—Ä—É–ø–ø–µ —É–∂–µ –ø—Ä–æ—à–ª–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ!"))
		fmt.Println("–ù–∞–∂–∞–ª –ø–æ–º–µ–Ω—è—Ç—å —Å—Å—ã–ª–∫—É, –∞ –∂–µ—Ä–µ–±—å–µ–≤–∫–∞ –±—ã–ª–∞")
		return
	} else if g.leaderID != userID { // –æ—Ç—Å–µ–∫–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –Ω–µ –ª–∏–¥–µ—Ä–æ–º
		bot.Send(tg.NewMessage(userID, "–¢—ã –Ω–µ –ª–∏–¥–µ—Ä –≥—Ä—É–ø–ø—ã"))
		fmt.Println("–ù–∞–∂–∞–ª –ø–æ–º–µ–Ω—è—Ç—å —Å—Å—ã–ª–∫—É, –∞ —Å–∞–º –Ω–µ –ª–∏–¥–µ—Ä –∂–µ!")
		return
	} else if g.ChangeLink == 2 { // —Å—É—Ç–æ—á–Ω—ã–π –ø—Ä–µ–¥–µ–ª –∑–∞–º–µ–Ω—ã —Å—Å—ã–ª–∫–∏
		bot.Send(tg.NewMessage(userID, "–°—Å—ã–ª–∫–∞ –Ω–µ–¥–∞–≤–Ω–æ –±—ã–ª–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ 2 —Ä–∞–∑–∞. –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–º–µ–Ω—è—Ç—å –µ—ë —Å–Ω–æ–≤–∞ —Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑ —Å—É—Ç–∫–∏ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è."))
		fmt.Println("–ù–∞–∂–∞–ª –ø–æ–º–µ–Ω—è—Ç—å —Å—Å—ã–ª–∫—É, –∞ —á–µ–Ω–¥–∂–ª–∏–Ω–∫ —É–∂–µ —Ä–∞–≤–µ–Ω:", g.ChangeLink)
		return
	}

	if querydata == "aDelLink" {
		button := []tg.InlineKeyboardButton{tg.NewInlineKeyboardButtonData("–ù—É–∂–Ω–æ –ø–æ–º–µ–Ω—è—Ç—å", "yesDelLink")}
		inlineKeyboard := tg.InlineKeyboardMarkup{InlineKeyboard: [][]tg.InlineKeyboardButton{button}}
		msg := tg.NewMessage(userID, "–°–º–µ–Ω–∞ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏ –Ω—É–∂–Ω–∞ –¥–ª—è —Å–ª—É—á–∞–µ–≤, –∫–æ–≥–¥–∞ –Ω—ã–Ω–µ—à–Ω—è—è —Å—Å—ã–ª–∫–∞ —Å–∫–æ–º–ø—Ä–æ–º–µ—Ç–∏—Ä–æ–≤–∞–Ω–∞, —á—Ç–æ –º–æ–∂–µ—Ç –ø–æ–∑–≤–æ–ª–∏—Ç—å –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–º –ª—é–¥—è–º –∑–∞–π—Ç–∏ –≤ –≥—Ä—É–ø–ø—É.\n\n–ï—Å–ª–∏ –ø–æ–º–µ–Ω—è—Ç—å —Ç–æ –ø–æ —Å—Ç–∞—Ä–æ–π —Å—Å—ã–ª–∫–µ —É–∂–µ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è –≤–æ–π—Ç–∏ –≤ –≥—Ä—É–ø–ø—É.\n\n–°—É—â–µ—Å—Ç–≤—É–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–æ—Ç—É –∏–∑–º–µ–Ω–µ–Ω–∏—è.‚ö†Ô∏è")
		msg.ReplyMarkup = inlineKeyboard
		bot.Send(msg)
		fmt.Println("–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–º–µ–Ω—ã –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏")
	} else if querydata == "yesDelLink" {
		g.ChangeLink++
		oldid := g.ID
		id := time.Now().UnixNano()
		groups[id] = &Group{ID: id, leaderID: g.leaderID, Name: g.Name, Description: g.Description, TimePlace: g.TimePlace, Members: g.Members, ChangeLink: g.ChangeLink}
		go func(ID int64) {
			time.Sleep(23 * time.Hour)
			for v := range groups {
				if groups[v].leaderID == userID {
					groups[v].ChangeLink = 0
					fmt.Println("–£ –≥—Ä—É–ø–ø—ã", groups[v].Name, "–ø—Ä–æ—à–ª–æ 23 —á–∞—Å–∞ –ø–æ—Å–ª–µ —Å–º–µ–Ω—ã —Å—Å—ã–ª–∫–∏. –ß–µ–Ω–¥–∂–ª–∏–Ω–∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:", groups[v].ChangeLink)
				}
			}
		}(userID)
		for _, userid := range groups[id].Members {
			members[userid].Group = id
		}
		_, err := db.Exec("UPDATE groups SET id = ? WHERE id = ?", id, oldid)
		if err != nil {
			fmt.Println("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ id –≥—Ä—É–ø–ø—ã –ø—Ä–æ–≤–∞–ª–∏–ª–æ—Å—å delLink. –ù–æ–≤—ã–π/–°—Ç–∞—Ä—ã–π id:", id, oldid)
		}
		delete(groups, g.ID)

		bot.Send(tg.NewMessage(userID, "–ù–æ–≤–∞—è —Å—Å—ã–ª–∫–∞:"))
		bot.Send(tg.NewMessage(userID, fmt.Sprintf("–ì—Ä—É–ø–ø–∞ –¢–∞–π–Ω—ã—Ö –°–∞–Ω—Ç ¬´%s¬ª\nt.me/%s?start=%d", groups[id].Name, bot.Self.UserName, groups[id].ID)))
		fmt.Println("–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞ –Ω–æ–≤–∞—è –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞. –ù–æ–≤—ã–π –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã:", id)
	}
}

func exclude(bot *tg.BotAPI, userID int64, querydata string, db *sql.DB) {
	g := groups[members[userID].Group]
	if g.ID == 0 { // –æ—Ç—Å–µ–∫–∞–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –≥—Ä—É–ø–ø—ã
		bot.Send(tg.NewMessage(userID, "–£ —Ç–µ–±—è –Ω–µ—Ç –≥—Ä—É–ø–ø—ã"))
		fmt.Println("–ù–∞–∂–∞–ª –∏—Å–∫–ª—é—á–∏—Ç—å, –∞ –≥—Ä—É–ø–ø—ã —Ç–æ –Ω–µ—Ç")
		return
	} else if !g.DrawTime.IsZero() { // –æ—Ç—Å–µ–∫–∞–µ–º –ø—Ä–æ—à–µ–¥—à—É—é –∂–µ—Ä–µ–±—å–µ–≤–∫—É
		bot.Send(tg.NewMessage(userID, "–í –≥—Ä—É–ø–ø–µ —É–∂–µ –ø—Ä–æ—à–ª–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ!"))
		fmt.Println("–ù–∞–∂–∞–ª –∏—Å–∫–ª—é—á–∏—Ç—å, –∞ –∂–µ—Ä–µ–±—å–µ–≤–∫–∞ –±—ã–ª–∞")
		return
	} else if g.leaderID != userID { // –æ—Ç—Å–µ–∫–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –Ω–µ –ª–∏–¥–µ—Ä–æ–º
		bot.Send(tg.NewMessage(userID, "–¢—ã –Ω–µ –ª–∏–¥–µ—Ä –≥—Ä—É–ø–ø—ã"))
		fmt.Println("–ù–∞–∂–∞–ª –∏—Å–∫–ª—é—á–∏—Ç—å, –∞ —Å–∞–º –Ω–µ –ª–∏–¥–µ—Ä –∂–µ!")
		return
	}

	if querydata == "aExclude" {
		button := []tg.InlineKeyboardButton{tg.NewInlineKeyboardButtonData("–•–æ—á—É –∏—Å–∫–ª—é—á–∏—Ç—å", "yesExclude")}
		inlineKeyboard := tg.InlineKeyboardMarkup{InlineKeyboard: [][]tg.InlineKeyboardButton{button}}
		msg := tg.NewMessage(userID, "–û—É, —ç—Ç–æ —É–∂–µ —Å–µ—Ä—å–µ–∑–Ω–æ! –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –∏–∑ –≥—Ä—É–ø–ø—ã –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –æ–±—Ä–∞—Ç–Ω–æ, –µ—Å–ª–∏ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–µ –º–µ–Ω—è–ª–∞—Å—å.‚ö†Ô∏è –ï—Å–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—à—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, –±—É–¥–µ—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –°–∞–Ω—Ç –≥—Ä—É–ø–ø—ã –ø–æ –∏–º–µ–Ω–∞–º, –∫–æ—Ç–æ—Ä—ã–µ –æ–Ω–∏ —É–∫–∞–∑–∞–ª–∏. –ö—Ä–æ–º–µ —Ç–µ–±—è. –ó–∞—Ç–µ–º –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω—É–∂–Ω–æ–≥–æ –°–∞–Ω—Ç—É –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –µ–≥–æ –∏–º–µ–Ω–µ–º.üîç\n\n–ü–æ—Å–ª–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –°–∞–Ω—Ç—ã —Å—Ä–∞–∑—É –±—É–¥–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–æ –ø–æ–º–µ–Ω—è—Ç—å —Å—Å—ã–ª–∫—É.\n\n–¢–æ—á–Ω–æ —Ö–æ—á–µ—à—å –∏—Å–∫–ª—é—á–∏—Ç—å?")
		msg.ReplyMarkup = inlineKeyboard
		bot.Send(msg)
		fmt.Println("–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
	} else if querydata == "yesExclude" {
		buttons := []tg.InlineKeyboardButton{}
		for _, id := range g.Members {
			if id == userID {
				continue
			}
			button := tg.NewInlineKeyboardButtonData(members[id].Name, strconv.FormatInt(id, 10)+"|Exclude")
			buttons = append(buttons, button)
		}
		fmt.Println(len(buttons))
		if len(buttons) == 0 {
			bot.Send(tg.NewMessage(userID, "–í –≥—Ä—É–ø–ø–µ –Ω–∏–∫–æ–≥–æ, –∫—Ä–æ–º–µ —Ç–µ–±—è. –î–∞–∂–µ –∏—Å–∫–ª—é—á–∏—Ç—å –Ω–µ –ø–æ–ª—É—á–∏—Ç—å—Å—è :_("))
			fmt.Println("–û—Ç–∫—Ä—ã–ª —Å–ø–∏—Å–æ–∫ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è, –∞ —Ç–∞–º –Ω–∏–∫–æ–≥–æ")
			return
		}
		var rows [][]tg.InlineKeyboardButton
		for _, btn := range buttons {
			row := []tg.InlineKeyboardButton{btn}
			rows = append(rows, row)
		}
		inlineKeyboard := tg.NewInlineKeyboardMarkup(rows...)
		msg := tg.NewMessage(userID, "–í—ã–±–µ—Ä–∏ –°–∞–Ω—Ç—É –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∏–∑ –≥—Ä—É–ø–ø—ã:")
		msg.ReplyMarkup = inlineKeyboard
		bot.Send(msg)
		fmt.Println("–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ")
	} else { // –≤—ã–±—Ä–∞–ª –∏—Å–∫–ª—é—á–∞–µ–º–æ–≥–æ
		delid, err := strconv.ParseInt(strings.TrimSuffix(querydata, "|Exclude"), 10, 64)
		if err != nil {
			bot.Send(tg.NewMessage(userID, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ :_(\n–ù–µ –ø–æ–ª—É—á–∏—Ç—å—Å—è –∏—Å–∫–ª—é—á–∏—Ç—å –°–∞–Ω—Ç—É, –ø–æ–∫–∞ –º–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å –Ω–µ –ø–æ—á–∏–Ω–∏—Ç —ç—Ç—É —Å–∏—Ç—É–∞—Ü–∏—é."))
			fmt.Println("–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —á–∏—Å–ª–∞ –≤ Exclude", err)
			return
		}

		var boolean bool // –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ –≥—Ä—É–ø–ø–µ
		for _, id := range g.Members {
			if id == delid {
				boolean = true
			}
		}
		if !boolean {
			bot.Send(tg.NewMessage(userID, "–≠—Ç–æ–≥–æ –°–∞–Ω—Ç—ã —É–∂–µ –Ω–µ—Ç –≤ –≤–∞—à–µ–π –≥—Ä—É–ø–ø–µ"))
			fmt.Println("–ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∏—Å–∫–ª—é—á—ë–Ω–Ω–æ–≥–æ")
			return
		}

		g.Members = removeElement(g.Members, delid) // –∏—Å–∫–ª—é—á–∞–µ–º —Å –≥—Ä—É–ø–ø—ã
		stringline := "<b>" + members[delid].Name + "</b> –±—ã–ª –∏—Å–∫–ª—é—á—ë–Ω –∏–∑ –≥—Ä—É–ø–ø—ã."
		for _, id := range g.Members { // —É–≤–µ–¥–æ–º–ª—è–µ–º –≥—Ä—É–ø–ø—É
			msg := tg.NewMessage(id, stringline)
			msg.ParseMode = "HTML"
			bot.Send(msg)
		}

		fmt.Println("–£—á–∞—Å—Ç–Ω–∏–∫ –±—ã–ª –∏—Å–∫–ª—é—á—ë–Ω –∏–∑ –≥—Ä—É–ø–ø—ã:", g.Name, "| –î–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞:", members[delid].Name, members[delid].ID)
		members[delid].Group = 0 // —á–∏—Å—Ç–∏–º –¥–∞–Ω–Ω—ã–µ
		members[delid].Link = ""
		members[delid].Status = ""
		msg := tg.NewMessage(delid, "–£–ø—Å! –¢–µ–±—è –∏—Å–∫–ª—é—á–∏–ª–∏ –∏–∑ –≥—Ä—É–ø–ø—ã. –í–æ–∑–º–æ–∂–Ω–æ, —Ç–≤–æ–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ —Å–ª–∏—à–∫–æ–º –æ—Å–ª–µ–ø–ª—è–ª–æ –æ—Å—Ç–∞–ª—å–Ω—É—é —á–∞—Å—Ç—å –∫–æ–ª–ª–µ–∫—Ç–∏–≤–∞!")
		keyboard(bot, delid, msg)
		button := []tg.InlineKeyboardButton{tg.NewInlineKeyboardButtonData("–ù—É–∂–Ω–æ –ø–æ–º–µ–Ω—è—Ç—å", "yesDelLink")}
		inlineKeyboard := tg.InlineKeyboardMarkup{InlineKeyboard: [][]tg.InlineKeyboardButton{button}}
		msg = tg.NewMessage(userID, "–ñ–µ–ª–∞–µ—à—å —Ç–µ–ø–µ—Ä—å –ø–æ–º–µ–Ω—è—Ç—å —Å—Å—ã–ª–∫—É?\n\n–°–º–µ–Ω–∞ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏ –Ω—É–∂–Ω–∞ –¥–ª—è —Å–ª—É—á–∞–µ–≤, –∫–æ–≥–¥–∞ –Ω—ã–Ω–µ—à–Ω—è—è —Å—Å—ã–ª–∫–∞ —Å–∫–æ–º–ø—Ä–æ–º–µ—Ç–∏—Ä–æ–≤–∞–Ω–∞, —á—Ç–æ –º–æ–∂–µ—Ç –ø–æ–∑–≤–æ–ª–∏—Ç—å –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–º –ª—é–¥—è–º –∑–∞–π—Ç–∏ –≤ –≥—Ä—É–ø–ø—É.\n\n–ï—Å–ª–∏ –ø–æ–º–µ–Ω—è—Ç—å —Ç–æ –ø–æ —Å—Ç–∞—Ä–æ–π —Å—Å—ã–ª–∫–µ —É–∂–µ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è –≤–æ–π—Ç–∏ –≤ –≥—Ä—É–ø–ø—É.\n\n–°—É—â–µ—Å—Ç–≤—É–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–æ—Ç—É –∏–∑–º–µ–Ω–µ–Ω–∏—è.‚ö†Ô∏è")
		msg.ReplyMarkup = inlineKeyboard
		bot.Send(msg)
		_, err = db.Exec("UPDATE users SET grp = ?, grpname = ?, link = ? WHERE id = ?", 0, "", "", delid)
		if err != nil {
			fmt.Println("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ—ã –æ —é–∑–µ—Ä–µ –ø–æ—Å–ª–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è exclude. UserID:", delid)
		}
		_, err = db.Exec("UPDATE groups SET people = ? WHERE id = ?", len(g.Members), g.ID)
		if err != nil {
			fmt.Println("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç–∏ –≥—Ä—É–ø–ø—ã exclude. –ù–æ–≤–∞—è –¥–ª–∏–Ω–Ω–∞/id–≥—Ä—É–ø–ø—ã:", len(g.Members), g.ID)
		}
	}
}

func delGroup(bot *tg.BotAPI, userID int64, querydata string, db *sql.DB) {
	g := groups[members[userID].Group]
	if g.ID == 0 { // –æ—Ç—Å–µ–∫–∞–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –≥—Ä—É–ø–ø—ã
		bot.Send(tg.NewMessage(userID, "–£ —Ç–µ–±—è —É–∂–µ –Ω–µ—Ç –≥—Ä—É–ø–ø—ã"))
		fmt.Println("–•–æ—Ç–µ–ª —É–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É, –∞ –≥—Ä—É–ø–ø—ã —É–∂–µ –Ω–µ—Ç")
		return
	} else if g.leaderID != userID { // –æ—Ç—Å–µ–∫–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –Ω–µ –ª–∏–¥–µ—Ä–æ–º –≥—Ä—É–ø–ø—ã
		bot.Send(tg.NewMessage(userID, "–¢—ã –Ω–µ –ª–∏–¥–µ—Ä –≥—Ä—É–ø–ø—ã"))
		fmt.Println("–•–æ—Ç–µ–ª —É–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É, –∞ —Å–∞–º –µ—é –Ω–µ –≤–ª–∞–¥–µ–µ—Ç")
		return
	}

	if querydata == "aDelGroup" {
		button := []tg.InlineKeyboardButton{tg.NewInlineKeyboardButtonData("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é —É–¥–∞–ª–µ–Ω–∏–µ", "yesDelGroup")}
		inlineKeyboard := tg.InlineKeyboardMarkup{InlineKeyboard: [][]tg.InlineKeyboardButton{button}}
		if !g.DrawTime.IsZero() {
			msg := tg.NewMessage(userID, "–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–∏—Ç —á–∞—Ç —É –≥—Ä—É–ø–ø—ã‚ö†Ô∏è\n\n–ï—Å–ª–∏ —á—Ç–æ, –≥—Ä—É–ø–ø–∞ —É–¥–∞–ª–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –µ—Å–ª–∏ –ø–æ–¥–æ–∂–¥–∞—Ç—å. –û—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω–æ —á–µ—Ä–µ–∑ –º–µ—Å—è—Ü –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è.\n\n–í–æ–∑–º–æ–∂–Ω–æ –∫—Ç–æ-—Ç–æ –≤ –≥—Ä—É–ø–ø–µ –Ω–µ —Ö–æ—Ç–µ–ª –±—ã –ø–æ–∫–∞ –µ—ë —É–¥–∞–ª–µ–Ω–∏—è.\n\n–ï—Å–ª–∏ —É–∂–µ –Ω–µ —Ç–µ—Ä–ø–∏—Ç—Å—è —É–¥–∞–ª–∏—Ç—å ‚Äî –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–π!")
			msg.ReplyMarkup = inlineKeyboard
			bot.Send(msg)
			fmt.Println("–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã. –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±—ã–ª–æ.")
			return
		}
		msg := tg.NewMessage(userID, "–£–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã —Å–æ—Ç—Ä—ë—Ç –¥–∞–Ω–Ω—ã–µ –∏–º—ë–Ω –∏ –∂–µ–ª–∞–Ω–∏–π –≤—Å–µ—Ö –°–∞–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–µ –æ–Ω–∏ –∑–∞–ø–æ–ª–Ω—è–ª–∏, –∞ —Ç–∞–∫–∂–µ –±—É–¥–µ—Ç –æ—Ç–∫–ª—é—á—ë–Ω —á–∞—Ç.‚ö†Ô∏è\n\n–£–¥–∞–ª—è—Ç—å –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –µ—Å–ª–∏ –ø—Ä–æ—Å—Ç–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–∫–∏—Ö-–ª–∏–±–æ –¥–∞–Ω–Ω—ã—Ö. –í—Å–µ –æ –≥—Ä—É–ø–ø–µ –º–æ–∂–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ ¬´–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–æ–π¬ª. –õ—é–±–æ–π –°–∞–Ω—Ç–∞ –º–æ–∂–µ—Ç –ø–æ–º–µ–Ω—è—Ç—å —Å–≤–æ—ë –∏–º—è –∏ –∂–µ–ª–∞–Ω–∏–µ –≤ ¬´–ö–∞–±–∏–Ω–µ—Ç–µ –°–∞–Ω—Ç—ã¬ª.")
		msg.ReplyMarkup = inlineKeyboard
		bot.Send(msg)
		fmt.Println("–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã")
	} else if querydata == "yesDelGroup" {
		if !g.DrawTime.IsZero() {
			fmt.Println("–ì—Ä—É–ø–ø–∞:", g.Name, "| ID:", g.ID, "–±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ –µ—ë –ª–∏–¥–µ—Ä–æ–º:", members[userID].Name, "| userID:", userID)
			for _, id := range g.Members {
				members[id].Group = 0
				members[id].Status = ""
				members[id].tempGroup = g.ID
				if id != userID {
					msg := tg.NewMessage(id, "–ì—Ä—É–ø–ø–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ –µ—ë –ª–∏–¥–µ—Ä–æ–º. –¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –æ–∫—Ä—É–∂–∞—é—â–∏–º –º–∏—Ä–æ–º‚Ä¶ –∏–ª–∏ —Å –±–µ–∑–¥—É—à–Ω—ã–º–∏ –º–∞—à–∏–Ω–∞–º–∏, –∫–∞–∫ —è! –ù–∞–ø—Ä–∏–º–µ—Ä, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ—é –≥—Ä—É–ø–ø—É.")
					keyboard(bot, id, msg)
				} else {
					msg := tg.NewMessage(id, "–ì—Ä—É–ø–ø–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞. –ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –≤–Ω–æ–≤—å —Å–æ–∑–¥–∞—Ç—å, —è –∫ —Ç–≤–æ–∏–º —É—Å–ª—É–≥–∞–º!")
					keyboard(bot, id, msg)
				}
			}
			_, err := db.Exec("DELETE FROM groups WHERE id = ?", g.ID)
			if err != nil {
				fmt.Println("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã –∏–∑ –ë–î DelGroup(draw). grpID:", g.ID)
			}
			for _, id := range g.Members {
				_, err = db.Exec("UPDATE users SET tmpgrp = ? WHERE id = ?", g.ID, id)
				if err != nil {
					fmt.Println("–û—à–∏–±–∫–∞ –≤–Ω–µ—Å–µ–Ω–∏ tmpgrp –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã –≤ delGroup(draw). group/user IDs:", g.ID, id)
				}
			}

			deletedgroups[g.ID] = g.DrawTime
			delete(groups, g.ID)
		} else {
			fmt.Println("–ì—Ä—É–ø–ø–∞:", g.Name, "| ID:", g.ID, "–±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ –µ—ë –ª–∏–¥–µ—Ä–æ–º:", members[userID].Name, "| userID:", userID)
			for _, id := range g.Members {
				members[id].Group = 0
				members[id].Status = ""
				if id != userID {
					msg := tg.NewMessage(id, "–ì—Ä—É–ø–ø–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ –µ—ë –ª–∏–¥–µ—Ä–æ–º. –¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –æ–∫—Ä—É–∂–∞—é—â–∏–º –º–∏—Ä–æ–º‚Ä¶ –∏–ª–∏ —Å –±–µ–∑–¥—É—à–Ω—ã–º–∏ –º–∞—à–∏–Ω–∞–º–∏, –∫–∞–∫ —è! –ù–∞–ø—Ä–∏–º–µ—Ä, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ—é –≥—Ä—É–ø–ø—É.")
					keyboard(bot, id, msg)
				} else {
					msg := tg.NewMessage(id, "–ì—Ä—É–ø–ø–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞. –ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –≤–Ω–æ–≤—å —Å–æ–∑–¥–∞—Ç—å, —è –∫ —Ç–≤–æ–∏–º —É—Å–ª—É–≥–∞–º!")
					keyboard(bot, id, msg)
				}
			}
			_, err := db.Exec("DELETE FROM groups WHERE id = ?", g.ID)
			if err != nil {
				fmt.Println("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã –∏–∑ –ë–î DelGroup. grpID:", g.ID)
			}
			delete(groups, g.ID)
		}
	}
}

func changeName(bot *tg.BotAPI, userID int64, query *tg.CallbackQuery, db *sql.DB) {
	if members[userID].Group == 0 { // –Ω–µ –≤ –≥—Ä—É–ø–ø–µ
		bot.Send(tg.NewMessage(userID, "–¢—ã –Ω–µ –≤ –≥—Ä—É–ø–ø–µ"))
		fmt.Println("–ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–º—è –±—É–¥—É—á–∏ –Ω–µ –≤ –≥—Ä—É–ø–ø–µ")
		return
	} else if !groups[members[userID].Group].DrawTime.IsZero() { // –æ—Ç—Å–µ–∫–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
		bot.Send(tg.NewMessage(userID, "–í –≥—Ä—É–ø–ø–µ —É–∂–µ –ø—Ä–æ—à–ª–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ"))
		fmt.Println("–ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–º—è –ø–æ—Å–ª–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è")
		return
	}

	if query.Data == "aChangeName" {
		button := []tg.InlineKeyboardButton{tg.NewInlineKeyboardButtonData("–•–æ—á—É", "yesChangeName")}
		inlineKeyboard := tg.InlineKeyboardMarkup{InlineKeyboard: [][]tg.InlineKeyboardButton{button}}
		stringline := "–¢–≤–æ–µ –∏–º—è —Å–µ–π—á–∞—Å: <b>" + members[userID].Name + "</b>\n\n–•–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å?"
		msg := tg.NewMessage(userID, stringline)
		msg.ParseMode = "HTML"
		msg.ReplyMarkup = inlineKeyboard
		bot.Send(msg)
		fmt.Println("–°–ø—Ä–∞—à–∏–≤–∞–µ—Ç—Å—è —Ö–æ—á–µ—Ç –ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –∏–º—è")
	} else if query.Data == "yesChangeName" {
		members[userID].Status = "ChangeName"
		protoname := query.From
		UserNick := protoname.UserName
		UserName := ""
		if protoname.FirstName != "" && protoname.LastName != "" {
			UserName = protoname.FirstName + " " + protoname.LastName
		} else {
			UserName = protoname.FirstName + protoname.LastName
		}
		var rows [][]tg.InlineKeyboardButton
		buttons := []tg.InlineKeyboardButton{}
		if UserNick != "" {
			buttons = []tg.InlineKeyboardButton{
				tg.NewInlineKeyboardButtonData(UserNick, "nickChangeName"),
			}
		}
		rows = append(rows, buttons)
		if UserName != "" {
			buttons = []tg.InlineKeyboardButton{
				tg.NewInlineKeyboardButtonData(UserName, "nameChangeName"),
			}
		}
		rows = append(rows, buttons)
		buttons = []tg.InlineKeyboardButton{
			tg.NewInlineKeyboardButtonData("–û—Ç–º–µ–Ω–∏—Ç—å", "cancelChangeName"),
		}
		rows = append(rows, buttons)
		inlineKeyboard := tg.NewInlineKeyboardMarkup(rows...)
		stringline := "<b>–ù–∞–±–µ—Ä–∏ —Å–≤–æ–µ –∏–º—è –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –ø–æ –∫–Ω–æ–ø–∫–µ.</b>\n\n–ñ–µ–ª–∞—Ç–µ–ª—å–Ω–æ, —á—Ç–æ–±—ã –∏–º—è –±—ã–ª–æ –ø–æ–Ω—è—Ç–Ω—ã–º –¥–ª—è –ª—é–±–æ–≥–æ –°–∞–Ω—Ç—ã!\n\n–ï—Å–ª–∏ –≤ –≥—Ä—É–ø–ø–µ –µ—Å—Ç—å –ª—é–¥–∏ —Å —Ç–∞–∫–∏–º –∂–µ –∏–º–µ–Ω–µ–º, –¥–æ–±–∞–≤—å —Å–≤–æ—é —Ñ–∞–º–∏–ª–∏—é. –ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –Ω–∏–∫–Ω–µ–π–º, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –ª—É—á—à–µ —É–∫–∞–∂–∏ —Å–≤–æ—ë –Ω–∞—Å—Ç–æ—è—â–µ–µ –∏–º—è."
		msg := tg.NewMessage(userID, stringline)
		msg.ReplyMarkup = inlineKeyboard
		msg.ParseMode = "HTML"
		bot.Send(msg)
		fmt.Println("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª —Å–º–µ–Ω—É –∏–º–µ–Ω–∏. –û–∂–∏–¥–∞–µ—Ç—Å—è –≤–≤–æ–¥")
	} else if query.Data == "nameChangeName" {
		if members[userID].Status != "ChangeName" {
			bot.Send(tg.NewMessage(userID, "–ß—Ç–æ-—Ç–æ –∏–¥–µ—Ç –Ω–µ —Ç–∞–∫! –ó–∞–ø—É—Å—Ç–∏ —Å–º–µ–Ω—É –∏–º–µ–Ω–∏ –≤–Ω–æ–≤—å!"))
			fmt.Println("–í—ã–±—Ä–∞–ª –∏–º—è –Ω–∞ —Å–º–µ–Ω—É, –Ω–æ —Å—Ç–∞—Ç—É—Å –Ω–µ —Ç–æ—Ç.")
			return
		}

		protoname := query.From
		UserName := ""
		if protoname.FirstName != "" && protoname.LastName != "" {
			UserName = protoname.FirstName + " " + protoname.LastName
		} else {
			UserName = protoname.FirstName + protoname.LastName
		}
		if members[userID].Name == UserName {
			bot.Send(tg.NewMessage(userID, "–ò–º—è –æ—Å—Ç–∞–ª–æ—Å—å –ø—Ä–µ–∂–Ω–∏–º. –ó–∞–ø—É—Å—Ç–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–Ω–æ–≤–∞, –µ—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å –µ–≥–æ!üîÑ"))
			members[userID].Status = "quo"
			fmt.Println("–í—ã–±—Ä–∞–ª –∏–º—è –Ω–∞ —Å–º–µ–Ω—É, –Ω–æ —ç—Ç–æ —Ç–æ–∂–µ —Å–∞–º–æ–µ")
			return
		}
		stringline := "–°–∞–Ω—Ç–∞ <b>" + members[userID].Name + "</b> —Å–º–µ–Ω–∏–ª —Å–≤–æ—è –∏–º—è –Ω–∞ <b>" + UserName + "</b>"
		for _, id := range groups[members[userID].Group].Members {
			msg := tg.NewMessage(id, stringline)
			msg.ParseMode = "HTML"
			bot.Send(msg)
		}
		members[userID].Name = UserName
		members[userID].Status = "quo"
		_, err := db.Exec("UPDATE users SET name = ? WHERE id = ?", UserName, userID)
		if err != nil {
			fmt.Println("–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–º–µ–Ω–∏ –≤ –ë–î nameChangeName. Name/id:", UserName, userID)
		}
		fmt.Println("–í—ã–±—Ä–∞–ª –∏–º—è –Ω–∞ —Å–º–µ–Ω—É ->", UserName)
	} else if query.Data == "nickChangeName" {
		if members[userID].Status != "ChangeName" {
			bot.Send(tg.NewMessage(userID, "–ß—Ç–æ-—Ç–æ –∏–¥–µ—Ç –Ω–µ —Ç–∞–∫! –ó–∞–ø—É—Å—Ç–∏ —Å–º–µ–Ω—É –∏–º–µ–Ω–∏ –≤–Ω–æ–≤—å!"))
			fmt.Println("–í—ã–±—Ä–∞–ª –Ω–∏–∫ –Ω–∞ —Å–º–µ–Ω—É, –Ω–æ —Å—Ç–∞—Ç—É—Å –Ω–µ —Ç–æ—Ç.")
			return
		} else if members[userID].Name == query.From.UserName {
			bot.Send(tg.NewMessage(userID, "–ò–º—è –æ—Å—Ç–∞–ª–æ—Å—å –ø—Ä–µ–∂–Ω–∏–º. –ó–∞–ø—É—Å—Ç–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–Ω–æ–≤–∞, –µ—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å –µ–≥–æ!üîÑ"))
			members[userID].Status = "quo"
			fmt.Println("–í—ã–±—Ä–∞–ª –Ω–∏–∫ –Ω–∞ —Å–º–µ–Ω—É, –Ω–æ —ç—Ç–æ —Ç–æ–∂–µ —Å–∞–º–æ–µ")
			return
		}
		stringline := "–°–∞–Ω—Ç–∞ <b>" + members[userID].Name + "</b> —Å–º–µ–Ω–∏–ª —Å–≤–æ—è –∏–º—è –Ω–∞ <b>" + query.From.UserName + "</b>"
		for _, id := range groups[members[userID].Group].Members {
			msg := tg.NewMessage(id, stringline)
			msg.ParseMode = "HTML"
			bot.Send(msg)
		}
		members[userID].Name = query.From.UserName
		members[userID].Status = "quo"
		_, err := db.Exec("UPDATE users SET name = ? WHERE id = ?", query.From.UserName, userID)
		if err != nil {
			fmt.Println("–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∏–∫–∞ –≤ –ë–î nickChangeName. Name/id:", query.From.UserName, userID)
		}
		fmt.Println("–í—ã–±—Ä–∞–ª –Ω–∏–∫ –Ω–∞ —Å–º–µ–Ω—É ->", query.From.UserName)
	} else if query.Data == "cancelChangeName" {
		if members[userID].Status == "quo" {
			bot.Send(tg.NewMessage(userID, "–£–∂–µ –æ—Ç–º–µ–Ω–µ–Ω–æ‚ú®"))
			fmt.Println("–û—Ç–º–µ–Ω–∏–ª –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ")
			return
		}
		members[userID].Status = "quo" // —Å—Ä–∞–∑—É –º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å
		bot.Send(tg.NewMessage(userID, "–û—Ç–º–µ–Ω–µ–Ω–æ‚ú®"))
		fmt.Println("–û—Ç–º–µ–Ω–∏–ª –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏")
	}
}

func showLink(bot *tg.BotAPI, userID int64, querydata string, db *sql.DB) {
	if members[userID].Group == 0 && members[userID].DrawID == 0 {
		msg := tg.NewMessage(userID, "–¢—ã –Ω–µ –≤ –≥—Ä—É–ø–ø–µ")
		keyboard(bot, userID, msg)
		fmt.Println("–ü–æ–ø—ã—Ç–∫–∞ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–µ –∂–µ–ª–∞–Ω–∏–µ, –∞ –≥—Ä—É–ø–ø—ã –Ω–µ—Ç")
		return
	}

	if querydata == "aShowLink" {
		button := []tg.InlineKeyboardButton{tg.NewInlineKeyboardButtonData("–•–æ—á—É –ø–æ–º–µ–Ω—è—Ç—å", "yesShowLink")}
		inlineKeyboard := tg.InlineKeyboardMarkup{InlineKeyboard: [][]tg.InlineKeyboardButton{button}}
		if members[userID].DrawID != 0 && members[userID].Link == "" && members[userID].ChangeLink == 0 { // –∂–µ–ª–∞–Ω–∏—è –Ω–µ –±—ã–ª–æ. —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ. –ø–æ–ø—ã—Ç–æ–∫ –Ω–µ—Ç.
			msg := tg.NewMessage(userID, "–ñ–µ–ª–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ, –∑–Ω–∞—á–∏—Ç —Ç–µ–±—è –±—É–¥–µ—Ç –∂–¥–∞—Ç—å —Å—é—Ä–ø—Ä–∏–∑!\n\nüéÑ-üéÅ-üéá-üéâ-üéÖ-üéÑ-‚ùÑÔ∏è-üéÖ-üéÜ-‚õÑ-üå®Ô∏è-ü¶å\n\n–ó–∞–º–µ–Ω—ã –∫–æ–Ω—á–∏–ª–∏—Å—åüòû")
			bot.Send(msg)
			fmt.Println("–ü–æ–∫–∞–∑–∞–ª–∏ –∂–µ–ª–∞–Ω–∏–µ (—Ç–∞–º –æ–∂–∏–¥–∞–µ—Ç—Å—è —Å—é—Ä–ø—Ä–∏–∑). –ó–∞–º–µ–Ω—ã –∫–æ–Ω—á–∏–ª–∏—Å—å")
			return
		} else if members[userID].DrawID != 0 && members[userID].ChangeLink == 0 { // –∂–µ–ª–∞–Ω–∏–µ –±—ã–ª–æ. —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ. –ø–æ–ø—ã—Ç–æ–∫ –Ω–µ—Ç
			bot.Send(tg.NewMessage(userID, fmt.Sprintf("üéÑ-üéÅ-üéá-üéâ-üéÖ-üéÑ-‚ùÑÔ∏è-üéÖ-üéÜ-‚õÑ-üå®Ô∏è-ü¶å\n\n–¢–≤–æ—ë –ñ–µ–ª–∞–Ω–∏–µ:\n%s\n\nüéÑ-üéÅ-üéá-üéâ-üéÖ-üéÑ-‚ùÑÔ∏è-üéÖ-üéÜ-‚õÑ-üå®Ô∏è-ü¶å\n\n–ó–∞–º–µ–Ω—ã –∫–æ–Ω—á–∏–ª–∏—Å—åüòû", members[userID].Link)))
			fmt.Println("–ü–æ–∫–∞–∑–∞–Ω–æ –∂–µ–ª–∞–Ω–∏–µ. –ó–∞–º–µ–Ω—ã –∫–æ–Ω—á–∏–ª–∏—Å—å")
			return
		} else if members[userID].DrawID != 0 && members[userID].Link == "" { // –∂–µ–ª–∞–Ω–∏—è –Ω–µ –±—ã–ª–æ. —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ. –ø–æ–ø—ã—Ç–∫–∏ –µ—Å—Ç—å.
			msg := tg.NewMessage(userID, fmt.Sprintf("–ñ–µ–ª–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ, –∑–Ω–∞—á–∏—Ç —Ç–µ–±—è –±—É–¥–µ—Ç –∂–¥–∞—Ç—å —Å—é—Ä–ø—Ä–∏–∑!\n\nüéÑ-üéÅ-üéá-üéâ-üéÖ-üéÑ-‚ùÑÔ∏è-üéÖ-üéÜ-‚õÑ-üå®Ô∏è-ü¶å\n\n–ú–µ–Ω—è—Ç—å —Å–≤–æ–µ –∂–µ–ª–∞–Ω–∏–µ –ø–æ—Å–ª–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–æ–∂–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ —Ä–∞–∑. –ù–µ –≤–æ–ª–Ω—É–π—Å—è, —Ç–≤–æ–π –¢–∞–π–Ω—ã–π –°–∞–Ω—Ç–∞ –±—É–¥–µ—Ç —É–≤–µ–¥–æ–º–ª—ë–Ω –æ –Ω–æ–≤–æ–º –∂–µ–ª–∞–Ω–∏–∏ –ø—Ä–∏ –∑–∞–º–µ–Ω–µ.\n–î–æ—Å—Ç—É–ø–Ω–æ –∑–∞–º–µ–Ω: %d", members[userID].ChangeLink))
			msg.ReplyMarkup = inlineKeyboard
			bot.Send(msg)
			fmt.Println("–ü–æ–∫–∞–∑–∞–ª–∏ –∂–µ–ª–∞–Ω–∏–µ (—Ç–∞–º –æ–∂–∏–¥–∞–µ—Ç—Å—è —Å—é—Ä–ø—Ä–∏–∑). –°–ø—Ä–∞—à–∏–≤–∞–µ—Ç—Å—è —Ö–æ—á–µ—Ç –ª–∏ –∑–∞–º–µ–Ω—É. –ó–∞–º–µ–Ω –æ—Å—Ç–∞–ª–æ—Å—å:", members[userID].ChangeLink)
			return
		} else if members[userID].DrawID != 0 { // –∂–µ–ª–∞–Ω–∏–µ –±—ã–ª–æ. —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ. –ø–æ–ø—ã—Ç–∫–∏ –µ—Å—Ç—å
			msg := tg.NewMessage(userID, fmt.Sprintf("üéÑ-üéÅ-üéá-üéâ-üéÖ-üéÑ-‚ùÑÔ∏è-üéÖ-üéÜ-‚õÑ-üå®Ô∏è-ü¶å\n\n–¢–≤–æ—ë –ñ–µ–ª–∞–Ω–∏–µ:\n%s\n\nüéÑ-üéÅ-üéá-üéâ-üéÖ-üéÑ-‚ùÑÔ∏è-üéÖ-üéÜ-‚õÑ-üå®Ô∏è-ü¶å\n\n–ú–µ–Ω—è—Ç—å —Å–≤–æ–µ –∂–µ–ª–∞–Ω–∏–µ –ø–æ—Å–ª–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–æ–∂–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ —Ä–∞–∑. –ù–µ –≤–æ–ª–Ω—É–π—Å—è, —Ç–≤–æ–π –¢–∞–π–Ω—ã–π –°–∞–Ω—Ç–∞ –±—É–¥–µ—Ç —É–≤–µ–¥–æ–º–ª—ë–Ω –æ –Ω–æ–≤–æ–º –∂–µ–ª–∞–Ω–∏–∏ –ø—Ä–∏ –∑–∞–º–µ–Ω–µ.\n–î–æ—Å—Ç—É–ø–Ω–æ –∑–∞–º–µ–Ω: %d", members[userID].Link, members[userID].ChangeLink))
			msg.ReplyMarkup = inlineKeyboard
			bot.Send(msg)
			fmt.Println("–ü–æ–∫–∞–∑–∞–Ω–æ –∂–µ–ª–∞–Ω–∏–µ. –°–ø—Ä–∞—à–∏–≤–∞–µ—Ç—Å—è —Ö–æ—á–µ—Ç –ª–∏ –∑–∞–º–µ–Ω—É. –ó–∞–º–µ–Ω –æ—Å—Ç–∞–ª–æ—Å—å:", members[userID].ChangeLink)
			return
		} else if members[userID].Link == "" { // –∂–µ–ª–∞–Ω–∏—è –Ω–µ –±—ã–ª–æ. —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–µ –ø—Ä–æ—à–ª–æ.
			msg := tg.NewMessage(userID, "–ñ–µ–ª–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ, –∑–Ω–∞—á–∏—Ç —Ç–µ–±—è –±—É–¥–µ—Ç –∂–¥–∞—Ç—å —Å—é—Ä–ø—Ä–∏–∑!\n\nüéÑ-üéÅ-üéá-üéâ-üéÖ-üéÑ-‚ùÑÔ∏è-üéÖ-üéÜ-‚õÑ-üå®Ô∏è-ü¶å")
			msg.ReplyMarkup = inlineKeyboard
			bot.Send(msg)
			fmt.Println("–ü–æ–∫–∞–∑–∞–ª–∏ –∂–µ–ª–∞–Ω–∏–µ (—Ç–∞–º –æ–∂–∏–¥–∞–µ—Ç—Å—è —Å—é—Ä–ø—Ä–∏–∑). –°–ø—Ä–æ—Å–∏–ª–∏ –±—É–¥–µ–º –ª–∏ –º–µ–Ω—è—Ç—å")
			return
		} else { // –∂–µ–ª–∞–Ω–∏–µ –±—ã–ª–æ. —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–µ –ø—Ä–æ—à–ª–æ.
			msg := tg.NewMessage(userID, fmt.Sprintf("üéÑ-üéÅ-üéá-üéâ-üéÖ-üéÑ-‚ùÑÔ∏è-üéÖ-üéÜ-‚õÑ-üå®Ô∏è-ü¶å\n\n–¢–≤–æ—ë –ñ–µ–ª–∞–Ω–∏–µ:\n%s\n\nüéÑ-üéÅ-üéá-üéâ-üéÖ-üéÑ-‚ùÑÔ∏è-üéÖ-üéÜ-‚õÑ-üå®Ô∏è-ü¶å", members[userID].Link))
			msg.ReplyMarkup = inlineKeyboard
			bot.Send(msg)
			fmt.Println("–ü–æ–∫–∞–∑–∞–ª–∏ –∂–µ–ª–∞–Ω–∏–µ. –°–ø—Ä–æ—Å–∏–ª–∏ –±—É–¥–µ–º –ª–∏ –º–µ–Ω—è—Ç—å")
		}
	} else if querydata == "yesShowLink" {
		if members[userID].DrawID != 0 && members[userID].Link == "" && members[userID].ChangeLink == 0 { // –∂–µ–ª–∞–Ω–∏—è –Ω–µ –±—ã–ª–æ. —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ. –ø–æ–ø—ã—Ç–æ–∫ –Ω–µ—Ç.
			msg := tg.NewMessage(userID, "–ñ–µ–ª–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ, –∑–Ω–∞—á–∏—Ç —Ç–µ–±—è –±—É–¥–µ—Ç –∂–¥–∞—Ç—å —Å—é—Ä–ø—Ä–∏–∑!\n\nüéÑ-üéÅ-üéá-üéâ-üéÖ-üéÑ-‚ùÑÔ∏è-üéÖ-üéÜ-‚õÑ-üå®Ô∏è-ü¶å\n\n–ó–∞–º–µ–Ω—ã –∫–æ–Ω—á–∏–ª–∏—Å—åüòû")
			bot.Send(msg)
			fmt.Println("–ù–∞–∂–∞–ª –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–º–µ–Ω—ã –∂–µ–ª–∞–Ω–∏—è. –ó–∞–º–µ–Ω—ã –∫–æ–Ω—á–∏–ª–∏—Å—å")
			return
		} else if members[userID].DrawID != 0 && members[userID].ChangeLink == 0 { // –∂–µ–ª–∞–Ω–∏–µ –±—ã–ª–æ. —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ. –ø–æ–ø—ã—Ç–æ–∫ –Ω–µ—Ç
			bot.Send(tg.NewMessage(userID, fmt.Sprintf("üéÑ-üéÅ-üéá-üéâ-üéÖ-üéÑ-‚ùÑÔ∏è-üéÖ-üéÜ-‚õÑ-üå®Ô∏è-ü¶å\n\n–¢–≤–æ—ë –ñ–µ–ª–∞–Ω–∏–µ:\n%s\n\nüéÑ-üéÅ-üéá-üéâ-üéÖ-üéÑ-‚ùÑÔ∏è-üéÖ-üéÜ-‚õÑ-üå®Ô∏è-ü¶å\n\n–ó–∞–º–µ–Ω—ã –∫–æ–Ω—á–∏–ª–∏—Å—åüòû", members[userID].Link)))
			fmt.Println("–ù–∞–∂–∞–ª –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–º–µ–Ω—ã –∂–µ–ª–∞–Ω–∏—è. –ó–∞–º–µ–Ω—ã –∫–æ–Ω—á–∏–ª–∏—Å—å")
			return
		}
		members[userID].Status = "ShowLink"
		button := []tg.InlineKeyboardButton{tg.NewInlineKeyboardButtonData("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "skipShowLink"), tg.NewInlineKeyboardButtonData("–û—Ç–º–µ–Ω–∏—Ç—å", "cancelShowLink")}
		inlineKeyboard := tg.InlineKeyboardMarkup{InlineKeyboard: [][]tg.InlineKeyboardButton{button}}
		stringline := "–ù–∞–ø–∏—à–∏ —Å–≤–æ–µ <b>–Ω–æ–≤–æ–µ –∂–µ–ª–∞–Ω–∏–µ</b>üéÖüå≤üéÅüß¶üß£üç∞.\n\n–Ø –ø–µ—Ä–µ–¥–∞–º –µ–≥–æ —Ç–≤–æ–µ–º—É –±—É–¥—É—â–µ–º—É –¢–∞–π–Ω–æ–º—É –°–∞–Ω—Ç–µ. –ú–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å —Å—Ä–∞–∑—É —Å—Å—ã–ª–∫—É –Ω–∞ —Å–≤–æ–µ –∂–µ–ª–∞–Ω–∏–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä, —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä –∏–∑ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞. –ò–ª–∏ —Å—Ä–∞–∑—É –Ω–∞ —Ü–µ–ª—ã–π –≤–∏—à–ª–∏—Å—Ç(—Å–ø–∏—Å–æ–∫ –∂–µ–ª–∞–Ω–∏–π).\n\n–ï—Å–ª–∏ –º–∏–ª–µ–µ —Å—é—Ä–ø—Ä–∏–∑, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å –ø—Ä–∏–≤–µ—Ç —Å–≤–æ–µ–º—É –±—É–¥—É—â–µ–º—É –¥–∞—Ä–∏—Ç–µ–ª—é –∏–ª–∏ –Ω–∞–∂–∞—Ç—å ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª"
		msg := tg.NewMessage(userID, stringline)
		msg.ParseMode = "HTML"
		msg.ReplyMarkup = inlineKeyboard
		bot.Send(msg)
		fmt.Println("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –∑–∞–º–µ–Ω—É –∂–µ–ª–∞–Ω–∏—è. –û–∂–∏–¥–∞–µ—Ç—Å—è –≤–≤–æ–¥")
	} else if querydata == "skipShowLink" {
		if members[userID].DrawID != 0 { // —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±—ã–ª–æ
			if members[userID].Status != "ShowLink" {
				bot.Send(tg.NewMessage(userID, "–ß—Ç–æ-—Ç–æ –∏–¥—ë—Ç –Ω–µ —Ç–∞–∫. –ó–∞–ø—É—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∂–µ–ª–∞–Ω–∏—è –≤–Ω–æ–≤—å!"))
				fmt.Println("—Ö–æ—Ç–µ–ª —Å–∫–∏–ø–Ω—É—Ç—å –∂–µ–ª–∞–Ω–∏–µ, –∞ —Å—Ç–∞—Ç—É—Å –¥—Ä—É–≥–æ–π")
				return
			} else if members[userID].ChangeLink == 0 {
				members[userID].Status = "quo"
				bot.Send(tg.NewMessage(userID, "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–º–µ–Ω—ã –∫–æ–Ω—á–∏–ª–∏—Å—åüòû"))
				fmt.Println("—Ö–æ—Ç–µ–ª —Å–∫–∏–ø–Ω—É—Ç—å –∂–µ–ª–∞–Ω–∏–µ, –∞ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–º–µ–Ω—ã –∫–æ–Ω—á–∏–ª–∏—Å—å.")
				return
			}

			members[userID].Status = "quo" // —Å—Ä–∞–∑—É –º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å
			if members[userID].Link == "" {
				bot.Send(tg.NewMessage(userID, "–ñ–µ–ª–∞–Ω–∏–µ –æ—Å—Ç–∞–ª–æ—Å—å –ø—Ä–µ–∂–Ω–∏–º. –î–æ—Å—Ç—É–ø–Ω–∞—è –∑–∞–º–µ–Ω–∞ –Ω–µ —Å–≥–æ—Ä–∞–µ—Ç.üåü –ó–∞–ø—É—Å—Ç–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–Ω–æ–≤–∞, –µ—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å –µ–≥–æ!üîÑ"))
				fmt.Println("—Å–∫–∏–ø–Ω—É–ª –∑–∞–º–µ–Ω—É –∂–µ–ª–∞–Ω–∏—è, –Ω–æ –æ–Ω–æ —Ç–∞–∫–∏–º –∏ –±—ã–ª–æ. –ü–æ–ø—ã—Ç–∫—É –Ω–µ —Å–∂–∏–≥–∞–µ–º.")
				return
			}
			members[userID].ChangeLink--
			members[members[userID].DrawID].Ward = ""
			members[userID].Link = ""
			bot.Send(tg.NewMessage(members[userID].DrawID, "–¢–≤–æ–π –ü–æ–¥–æ–ø–µ—á–Ω—ã–π –∑–∞–º–µ–Ω–∏–ª —Å–≤–æ–µ –∂–µ–ª–∞–Ω–∏–µ –Ω–∞ —Å—é—Ä–ø—Ä–∏–∑!‚ú®\n\n–ü–æ—Å—Ç–∞—Ä–∞–π—Å—è –≤—ã–±—Ä–∞—Ç—å –ø–æ–¥–∞—Ä–æ–∫, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å–µ–Ω –∏ –ø—Ä–∏—è—Ç–µ–Ω –µ–º—É."))
			bot.Send(tg.NewMessage(userID, "–Ø —Å–æ—Ö—Ä–∞–Ω–∏–ª –∂–µ–ª–∞–Ω–∏–µ —Å—é—Ä–ø—Ä–∏–∑–∞!‚ú® –¢–≤–æ–µ–º—É –¢–∞–π–Ω–æ–º—É –°–∞–Ω—Ç–µ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ."))
			_, err := db.Exec("UPDATE users SET link = ?, changelink = ? WHERE id = ?", "", members[userID].ChangeLink, userID)
			if err != nil {
				fmt.Println("–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ª–∏–Ω–∫–∏ skipshowlink(draw). UserID:", userID)
			}
			_, err = db.Exec("UPDATE users SET ward = ? WHERE id = ?", "", members[userID].DrawID)
			if err != nil {
				fmt.Println("–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è ward skipshowlink(draw). drawID:", members[userID].DrawID)
			}
			fmt.Println("—Å–∫–∏–ø–Ω—É–ª –∑–∞–º–µ–Ω—É –∂–µ–ª–∞–Ω–∏—è, —Ç–µ–ø–µ—Ä—å –µ–≥–æ –∂–¥—ë—Ç —Å—é—Ä–ø—Ä–∏–∑")
		} else { // —Å–∫–∏–ø–Ω—É–ª, —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–µ –±—ã–ª–æ
			if members[userID].Status != "ShowLink" {
				bot.Send(tg.NewMessage(userID, "–ß—Ç–æ-—Ç–æ –∏–¥—ë—Ç –Ω–µ —Ç–∞–∫. –ó–∞–ø—É—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∂–µ–ª–∞–Ω–∏—è –≤–Ω–æ–≤—å!"))
				fmt.Println("—Ö–æ—Ç–µ–ª —Å–∫–∏–ø–Ω—É—Ç—å –∂–µ–ª–∞–Ω–∏–µ, –∞ —Å—Ç–∞—Ç—É—Å –¥—Ä—É–≥–æ–π")
				return
			}

			members[userID].Status = "quo" // —Å—Ä–∞–∑—É –º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å
			if members[userID].Link == "" {
				bot.Send(tg.NewMessage(userID, "–ñ–µ–ª–∞–Ω–∏–µ –æ—Å—Ç–∞–ª–æ—Å—å –ø—Ä–µ–∂–Ω–∏–º.üåü –ó–∞–ø—É—Å—Ç–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–Ω–æ–≤–∞, –µ—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å –µ–≥–æ!üîÑ"))
				fmt.Println("—Å–∫–∏–ø–Ω—É–ª –∑–∞–º–µ–Ω—É –∂–µ–ª–∞–Ω–∏—è, –Ω–æ –æ–Ω–æ —Ç–∞–∫–∏–º –∏ –±—ã–ª–æ.")
				return
			}
			members[userID].Link = ""
			bot.Send(tg.NewMessage(userID, "–Ø —Å–æ—Ö—Ä–∞–Ω–∏–ª –∂–µ–ª–∞–Ω–∏–µ —Å—é—Ä–ø—Ä–∏–∑–∞!‚ú®"))
			_, err := db.Exec("UPDATE users SET link = ? WHERE id = ?", "", userID)
			if err != nil {
				fmt.Println("–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ª–∏–Ω–∫–∏ skipshowlink(else/nodraw). UserID:", userID)
			}
			fmt.Println("—Å–∫–∏–ø–Ω—É–ª –∑–∞–º–µ–Ω—É –∂–µ–ª–∞–Ω–∏—è, —Ç–µ–ø–µ—Ä—å –µ–≥–æ –∂–¥—ë—Ç —Å—é—Ä–ø—Ä–∏–∑")
		}
	} else if querydata == "cancelShowLink" {
		if members[userID].Status == "quo" {
			bot.Send(tg.NewMessage(userID, "–£–∂–µ –æ—Ç–º–µ–Ω–µ–Ω–æ‚ú®"))
			fmt.Println("–û—Ç–º–µ–Ω–∏–ª –∏–∑–º–µ–Ω–µ–Ω–∏—è –∂–µ–ª–∞–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω–æ")
			return
		}
		members[userID].Status = "quo" // —Å—Ä–∞–∑—É –º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å
		bot.Send(tg.NewMessage(userID, "–û—Ç–º–µ–Ω–µ–Ω–æ‚ú®"))
		fmt.Println("–û—Ç–º–µ–Ω–∏–ª –∏–∑–º–µ–Ω–µ–Ω–∏—è –∂–µ–ª–∞–Ω–∏—è")
	}
}

func ImSanta(bot *tg.BotAPI, userID int64) {
	if members[userID].DrawID == 0 {
		msg := tg.NewMessage(userID, "–£ —Ç–µ–±—è —É–∂–µ –Ω–µ—Ç –ø–æ–¥–æ–ø–µ—á–Ω–æ–≥–æ!")
		keyboard(bot, userID, msg)
		fmt.Println("–û—Ç–∫—Ä—ã–ª –∫—Ç–æ –µ–≥–æ –ø–æ–¥–æ–ø–µ—á–Ω—ã–π, –∞ —Ç–∞–º –ø—É—Å—Ç–æ!")
		return
	}

	if members[userID].Ward != "" { // –µ—Å–ª–∏ –±—ã–ª–æ –∂–µ–ª–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ
		stringline := "–¢–≤–æ–π –ü–æ–¥–æ–ø–µ—á–Ω—ã–π <b>" + members[members[userID].WardID].Name + "</b> –ø–æ–∂–µ–ª–∞–ª —Å–ª–µ–¥—É—é—â–µ–≥–æ:\n\nüéÑ-üéÅ-üéá-üéâ-üéÖ-üéÑ-‚ùÑÔ∏è-üéÖ-üéÜ-‚õÑ-üå®Ô∏è-ü¶å\n\n<b>" + members[userID].Ward + "</b>\n\nüéÑ-üéÅ-üéá-üéâ-üéÖ-üéÑ-‚ùÑÔ∏è-üéÖ-üéÜ-‚õÑ-üå®Ô∏è-ü¶å"
		msg := tg.NewMessage(userID, stringline)
		msg.ParseMode = "HTML"
		bot.Send(msg)
		fmt.Println("–ø–æ–∫–∞–∑–∞–Ω–æ –∂–µ–ª–∞–Ω–∏–µ –ø–æ–¥–æ–ø–µ—á–Ω–æ–≥–æ")
	} else { // –µ—Å–ª–∏ –Ω–µ –±—ã–ª–æ –∂–µ–ª–∞–Ω–∏—è
		stringline := "–¢–≤–æ–π –ü–æ–¥–æ–ø–µ—á–Ω—ã–π <b>" + members[members[userID].WardID].Name + "</b> —Ö–æ—á–µ—Ç —Å—é—Ä–ø—Ä–∏–∑–∞, –ø–æ—Å—Ç–∞—Ä–∞–π—Å—è –≤—ã–±—Ä–∞—Ç—å –ø–æ–¥–∞—Ä–æ–∫, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å–µ–Ω –∏ –ø—Ä–∏—è—Ç–µ–Ω —Ç–≤–æ–µ–º—É –ü–æ–¥–æ–ø–µ—á–Ω–æ–º—É.\nüéÑ-üéÅ-üéá-üéâ-üéÖ-üéÑ-‚ùÑÔ∏è-üéÖ-üéÜ-‚õÑ-üå®Ô∏è-ü¶å"
		msg := tg.NewMessage(userID, stringline)
		msg.ParseMode = "HTML"
		bot.Send(msg)
		fmt.Println("–ø–æ–∫–∞–∑–∞–Ω–æ –∂–µ–ª–∞–Ω–∏–µ –ø–æ–¥–æ–ø–µ—á–Ω–æ–≥–æ. —Ç–∞–º —Å—é—Ä–ø—Ä–∏–∑")
	}
}

func leaveGroup(bot *tg.BotAPI, userID int64, querydata string, db *sql.DB) {
	g := groups[members[userID].Group]
	if g.ID == 0 { // –Ω–µ –≤ –≥—Ä—É–ø–ø–µ
		bot.Send(tg.NewMessage(userID, "–¢—ã —É–∂–µ –±–µ–∑ –≥—Ä—É–ø–ø—ã"))
		fmt.Println("–•–æ—Ç–µ–ª –ª–∏–≤–Ω—É—Ç—å —Å –≥—Ä—É–ø–ø—ã, –∞ —Å–∞–º –∏ —Ç–∞–∫ –±–µ–∑ –Ω–µ—ë")
		return
	} else if g.leaderID == userID { // –æ—Ç—Å–µ–∫–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –ª–∏–¥–µ—Ä–æ–º –≥—Ä—É–ø–ø—ã
		bot.Send(tg.NewMessage(userID, "–¢—ã –Ω–µ –ª–∏–¥–µ—Ä –≥—Ä—É–ø–ø—ã"))
		fmt.Println("–•–æ—Ç–µ–ª –ª–∏–≤–Ω—É—Ç—å —Å –≥—Ä—É–ø–ø—ã, –∞ —Å–∞–º –µ—é –≤–ª–∞–¥–µ–µ—Ç!")
		return
	}

	if querydata == "aLeaveGroup" {
		button := []tg.InlineKeyboardButton{tg.NewInlineKeyboardButtonData("–Ø —É—Ö–æ–∂—É", "yesLeaveGroup")}
		inlineKeyboard := tg.InlineKeyboardMarkup{InlineKeyboard: [][]tg.InlineKeyboardButton{button}}
		if !g.DrawTime.IsZero() {
			msg := tg.NewMessage(userID, "–ü–æ–∫–∏–Ω—É—Ç—å –≥—Ä—É–ø–ø—É –º–æ–∂–Ω–æ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–º–Ω–∏, —á—Ç–æ –ø–æ–∫–∏–¥–∞—è –≥—Ä—É–ø–ø—É, —Ç–≤–æ–µ –∏–º—è —Å–æ—Ç—Ä—ë—Ç—Å—è –∏–∑ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ –±—É–¥–µ—Ç –æ—Ç–∫–ª—é—á—ë–Ω —á–∞—Ç. –û–¥–Ω–∞–∫–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∂–µ–ª–∞–Ω–∏—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç —Ä–∞–±–æ—Ç–∞—Ç—å.\n\n–ï—Å–ª–∏ —Ç—ã –ø–æ–º–µ–Ω—è–µ—à—å —Å–≤–æ–µ –∂–µ–ª–∞–Ω–∏–µ, —Ç–≤–æ–π –¢–∞–π–Ω—ã–π –°–∞–Ω—Ç–∞ –≤—Å–µ —Ä–∞–≤–Ω–æ –ø–æ–ª—É—á–∏—Ç –æ–± —ç—Ç–æ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ. –ï—Å–ª–∏ —Ç–≤–æ–π –ü–æ–¥–æ–ø–µ—á–Ω—ã–π –ø–æ–º–µ–Ω—è–µ—Ç, —è –ø—Ä–∏—à–ª—é –æ–± —ç—Ç–æ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–µ–±–µ. –ö–æ–Ω–µ—á–Ω–æ, –µ—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è.\n\n–ì—Ä—É–ø–ø–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è–µ—Ç—Å—è, –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω–æ —á–µ—Ä–µ–∑ –º–µ—Å—è—Ü –ø–æ—Å–ª–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è. –¢–∞–∫–∂–µ –≥—Ä—É–ø–ø—É –º–æ–∂–µ—Ç —É–¥–∞–ª–∏—Ç—å –µ—ë –ª–∏–¥–µ—Ä.\n\n–í —Å–ª—É—á–∞–µ –≤—ã—Ö–æ–¥–∞ –≤ —ç—Ç—É –≥—Ä—É–ø–ø—É —É–∂–µ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è –≤–µ—Ä–Ω—É—Ç—å—Å—è.\n\n–ï—Å–ª–∏ –≤—Å–µ —Ä–∞–≤–Ω–æ –Ω—É–∂–Ω–æ —É–π—Ç–∏ ‚Äî –∂–º–∏ –∫–Ω–æ–ø–∫—É.üò¢")
			msg.ReplyMarkup = inlineKeyboard
			bot.Send(msg)
			fmt.Println("–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞ –≤—ã—Ö–æ–¥ –∏–∑ –≥—Ä—É–ø–ø—ã. –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±—ã–ª–æ.")
			return
		}
		msg := tg.NewMessage(userID, "–ü–æ–∫–∏–Ω—É—Ç—å –≥—Ä—É–ø–ø—É –º–æ–∂–Ω–æ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç. –ü–æ–∫–∏–¥–∞—è, —Ç–≤–æ–µ –∏–º—è —Å–æ—Ç—Ä—ë—Ç—Å—è –∏–∑ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, —Ç—ã –Ω–µ –±—É–¥–µ—à—å —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã –∏ –±—É–¥–µ—Ç –æ—Ç–∫–ª—é—á—ë–Ω —á–∞—Ç.\n\n–ï—Å–ª–∏ –ø—Ä–æ—Å—Ç–æ —Ö–æ—á–µ—Ç—Å—è –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ—ë –∏–º—è –∏–ª–∏ –∂–µ–ª–∞–Ω–∏–µ, —Ç–æ –≤ ¬´–ö–∞–±–∏–Ω–µ—Ç–µ –°–∞–Ω—Ç—ã¬ª –µ—Å—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –æ–ø—Ü–∏–∏.\n\n–í –≥—Ä—É–ø–ø—É –º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è, –µ—Å–ª–∏ –Ω–µ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏–ª–∏ –∑–∞–º–µ–Ω—ã –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏.\n\n–ï—Å–ª–∏ –≤—Å–µ —Ä–∞–≤–Ω–æ –Ω—É–∂–Ω–æ —É–π—Ç–∏ ‚Äî –∂–º–∏ –∫–Ω–æ–ø–∫—É.üò¢")
		msg.ReplyMarkup = inlineKeyboard
		bot.Send(msg)
		fmt.Println("–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞ –≤—ã—Ö–æ–¥ –∏–∑ –≥—Ä—É–ø–ø—ã")
	} else if querydata == "yesLeaveGroup" {
		if !g.DrawTime.IsZero() {
			fmt.Println("–ì—Ä—É–ø–ø—É –≥–¥–µ –±—ã–ª–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ:", g.Name, "| ID:", g.ID, "–ø–æ–∫–∏–Ω—É–ª —É—á–∞—Å—Ç–Ω–∏–∫:", members[userID].Name, "| userID:", userID)
			members[userID].Group = 0
			members[userID].Status = ""
			members[userID].tempGroup = g.ID
			g.Members = removeElement(g.Members, userID)
			stringline := "–°–∞–Ω—Ç–∞ <b>" + members[userID].Name + "</b> –ø–æ–∫–∏–Ω—É–ª –≥—Ä—É–ø–ø—É. –ú—ã –æ—Å—Ç–∞–ª–∏—Å—å —Ç–æ–ª—å–∫–æ —Å –Ω–∞—à–∏–º–∏ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–º–∏ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏ –æ –Ω—ë–º.üò¢"
			for _, id := range g.Members {
				msg := tg.NewMessage(id, stringline)
				msg.ParseMode = "HTML"
				bot.Send(msg)
			}
			_, err := db.Exec("UPDATE users SET grp = ?, grpname = ?, tmpgrp = ? WHERE id = ?", 0, "", g.ID, userID)
			if err != nil {
				fmt.Println("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —é–∑–µ—Ä–∞ –≤ leavegroup(nodraw). UserID:", userID)
			}
			_, err = db.Exec("UPDATE groups SET people = ? WHERE id = ?", len(g.Members), g.ID)
			if err != nil {
				fmt.Println("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç–∏ –≥—Ä—É–ø–ø—ã –≤ leavegroup. –ù–æ–≤–∞—è –¥–ª–∏–Ω–Ω–∞/groupID:", len(g.Members), g.ID, err)
			}
			msg := tg.NewMessage(userID, "–¢—ã –±–æ–ª—å—à–µ –Ω–µ –≤ –≥—Ä—É–ø–ø–µ. –£–¥–∞—á–∏ –≤ —Ç–≤–æ–∏—Ö –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è—Ö!‚ú®")
			keyboard(bot, userID, msg)
			return
		}
		fmt.Println("–ì—Ä—É–ø–ø—É:", g.Name, "| ID:", g.ID, "–ø–æ–∫–∏–Ω—É–ª —É—á–∞—Å—Ç–Ω–∏–∫:", members[userID].Name, "| userID:", userID)
		g.Members = removeElement(g.Members, userID)
		stringline := "–°–∞–Ω—Ç–∞ <b>" + members[userID].Name + "</b> –ø–æ–∫–∏–Ω—É–ª –≥—Ä—É–ø–ø—É. –ú—ã –æ—Å—Ç–∞–ª–∏—Å—å —Ç–æ–ª—å–∫–æ —Å –Ω–∞—à–∏–º–∏ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–º–∏ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏ –æ –Ω—ë–º.üò¢"
		for _, id := range g.Members {
			msg := tg.NewMessage(id, stringline)
			msg.ParseMode = "HTML"
			bot.Send(msg)
		}
		members[userID].Group = 0
		members[userID].Status = ""
		members[userID].Link = ""
		_, err := db.Exec("UPDATE users SET grp = ?, grpname = ?, link = ? WHERE id = ?", 0, "", "", userID)
		if err != nil {
			fmt.Println("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —é–∑–µ—Ä–∞ –≤ leavegroup(nodraw). UserID:", userID)
		}
		_, err = db.Exec("UPDATE groups SET people = ? WHERE id = ?", len(g.Members), g.ID)
		if err != nil {
			fmt.Println("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç–∏ –≥—Ä—É–ø–ø—ã –≤ leavegroup. –ù–æ–≤–∞—è –¥–ª–∏–Ω–Ω–∞/groupID:", len(g.Members), g.ID)
		}
		msg := tg.NewMessage(userID, "–¢—ã –±–æ–ª—å—à–µ –Ω–µ –≤ –≥—Ä—É–ø–ø–µ. –£–¥–∞—á–∏ –≤ —Ç–≤–æ–∏—Ö –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è—Ö!‚ú®")
		keyboard(bot, userID, msg)
	}
}

// –ö–∞—Ä—Ç–∞ –≤ –∫–æ—Ç–æ—Ä–æ–π —Å–æ–¥–µ—Ä–∂–∞—Ç—Å—è –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –≥—Ä—É–ø–ø—ã. –ö–ª—é—á —ç—Ç–æ id –≥—Ä—É–ø–ø—ã, –∞ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∞ –Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≥—Ä—É–ø–ø—ã
var groups = make(map[int64]*Group)

// —É–¥–∞–ª—ë–Ω–Ω—ã–µ –ø–æ—Å–ª–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã. –î–ª—è –±—É–¥—É—â–µ–π —á–∏—Å—Ç–∫–∏
var deletedgroups = make(map[int64]time.Time)

// –ì—Ä—É–ø–ø–∞. –ï—ë –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –º–∞–ø–∞ —Å–æ –≤—Å–µ–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
type Group struct {
	ID          int64
	leaderID    int64
	Name        string
	Description string
	TimePlace   string
	Members     []int64
	DrawTime    time.Time
	ChangeLink  int
}

// –ö–∞—Ä—Ç–∞ –≤ –∫–æ—Ç–æ—Ä–æ–π —Å–æ–¥–µ—Ä–∂–∞—Ç—Å—è –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–æ—Å—Ç–æ—è—â–∏–µ –≤ –≥—Ä—É–ø–ø–µ. –ö–ª—é—á —ç—Ç–æ id —é–∑–µ—Ä–∞, –∞ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∞ –Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –º–µ–º–±–µ—Ä
var members = make(map[int64]*Member)

// –£—á–∞—Å—Ç–Ω–∏–∫ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω—ë–º
type Member struct {
	ID         int64
	Group      int64
	tempGroup  int64
	Name       string
	tempName   string
	Link       string
	ChangeLink int
	Ward       string
	WardID     int64
	DrawID     int64
	Status     string
}

// —Ä–µ–ø–ª–∞–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
func keyboard(bot *tg.BotAPI, userID int64, msge tg.MessageConfig) {
	msge.ParseMode = "HTML"
	var ok1, ok2, ok3 bool
	if members[userID].Group != 0 {
		ok2 = true
		if groups[members[userID].Group].leaderID == userID {
			ok1 = true
		}
	}
	if members[userID].DrawID != 0 {
		ok3 = true
	}

	if ok3 && !ok2 {
		replyKeyboard := tg.NewReplyKeyboard(
			tg.NewKeyboardButtonRow(
				tg.NewKeyboardButton("–°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É"),
				tg.NewKeyboardButton("–ö–∞–±–∏–Ω–µ—Ç –°–∞–Ω—Ç—ãüéÖ"),
				tg.NewKeyboardButton("–°–ø—Ä–∞–≤–∫–∞‚ÑπÔ∏è"),
			),
		)
		msge.ReplyMarkup = replyKeyboard
		bot.Send(msge)
		return
	}

	if ok2 && !ok1 {
		replyKeyboard := tg.NewReplyKeyboard(
			tg.NewKeyboardButtonRow(
				tg.NewKeyboardButton("–ö–∞–±–∏–Ω–µ—Ç –°–∞–Ω—Ç—ãüéÖ"),
				tg.NewKeyboardButton("–°–ø—Ä–∞–≤–∫–∞‚ÑπÔ∏è"),
			),
		)
		msge.ReplyMarkup = replyKeyboard
		bot.Send(msge)

		return
	} else if ok1 {
		replyKeyboard := tg.NewReplyKeyboard(
			tg.NewKeyboardButtonRow(
				tg.NewKeyboardButton("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–æ–π‚öôÔ∏è"),
				tg.NewKeyboardButton("–ö–∞–±–∏–Ω–µ—Ç –°–∞–Ω—Ç—ãüéÖ"),
				tg.NewKeyboardButton("–°–ø—Ä–∞–≤–∫–∞‚ÑπÔ∏è"),
			),
		)
		msge.ReplyMarkup = replyKeyboard
		bot.Send(msge)

		return
	}
	replyKeyboard := tg.NewReplyKeyboard(
		tg.NewKeyboardButtonRow(
			tg.NewKeyboardButton("–°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É"),
			tg.NewKeyboardButton("–°–ø—Ä–∞–≤–∫–∞‚ÑπÔ∏è"),
		),
	)
	msge.ReplyMarkup = replyKeyboard
	bot.Send(msge)
}
